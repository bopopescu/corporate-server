#!/usr/share/ucs-test/runner python
## desc: Check if requests with tracebacks are handled correctly
## roles:
##  - domaincontroller_master
## packages:
##  - univention-management-console
##  - univention-management-console-frontend
##  - ucs-test-umc-module
## exposure: dangerous


from __future__ import print_function
import time
import psutil
import subprocess
import json

from univention.testing.umc import Client
from univention.lib.umc import HTTPError
import univention.testing.utils as utils

from univention.management.console.modules.ucstest import joinscript, unjoinscript


def kill_ucstest():
	search_mask = set(['/usr/sbin/univention-management-console-module', '-m', 'ucstest'])
	for process in psutil.process_iter():
		if not (search_mask - set(process.cmdline())):
			print('Found module process %s %r and killing it ...' % (process.pid, process.cmdline(),))
			process.kill()
			process.terminate()
	time.sleep(0.5)
	for process in psutil.process_iter():
		if not (search_mask - set(process.cmdline())):
			assert False, 'ERROR: ... module process %s %r is still there, this should not happen!' % (process.pid, process.cmdline(),)


def restart_web_server():
	subprocess.call(['service', 'univention-management-console-web-server', 'restart'])
	subprocess.call(['service', 'univention-management-console-server', 'restart'])
	subprocess.call(['service', 'apache2', 'restart'])


def test_umc_tracebacks(umc_client, path, expected_trace):
	print("checking: {}".format(path))
	try:
		umc_client.umc_command(path)
	except HTTPError as exc:
		if not exc.status == 591:
			utils.fail("Wrong http return code")
		if not json.loads(exc.response.body)["traceback"].endswith(expected_trace):
			print(expected_trace)
			utils.fail("Wrong traceback")
	else:
		utils.fail("No error thrown?")


def test_umc_errors(umc_client, path, expected_error):
	print("checking: {}".format(path))
	try:
		umc_client.umc_command(path)
	except HTTPError as exc:
		if not exc.status == 400:
			utils.fail("Wrong http return code")
		if not json.loads(exc.response.body)["message"] == expected_error:
			utils.fail("Wrong message")
		if json.loads(exc.response.body)["traceback"] is not None:
			utils.fail("Traceback should be None (null)")
	else:
		utils.fail("No error thrown?")


def main():
	umc_client = Client.get_test_connection()
	traceback_checks = (
		("ucstest/non_threaded_traceback", "raise NonThreadedError()\nNonThreadedError"),
		("ucstest/threaded_traceback", "raise ThreadedError()\nThreadedError"),
		("ucstest/traceback_as_thread_result", "Request: ucstest/traceback_as_thread_result\n\nThreadedError"),
	)
	for path, expected_trace in traceback_checks:
		test_umc_tracebacks(umc_client, path, expected_trace)
	error_checks = (
		("ucstest/umc_error_traceback", "This is an UMC Error"),
		("ucstest/umc_error_as_thread_result", "This is an UMC Error"),
	)
	for path, expected_error in error_checks:
		test_umc_errors(umc_client, path, expected_error)


if __name__ == '__main__':
	joinscript()
	try:
		main()
	finally:
		restart_web_server()
		unjoinscript()
