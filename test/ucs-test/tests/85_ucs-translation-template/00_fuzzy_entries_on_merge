#!/usr/share/ucs-test/runner python
## desc: |
##  univention-ucs-translation-merge fuzzy entries
##  Does univention-ucs-translation-merge create fuzzy entries correctly when
##  merging into an existing translation?
## bugs: [41223]
## tags: [WIP, translation-template, skip_admember]
## roles:
##  - domaincontroller_master
## versions:
##  4.1-2: found
## exposure: safe
## packages:
##   - univention-ucs-translation-template
##   - subversion
from distutils.file_util import copy_file
from distutils.dir_util import remove_tree
from tempfile import mkdtemp
from time import time
import logging
import os
import polib
import random
import tools
import univention.testing.utils as utils

TRANSLATION_PKG_NAME = 'univention-l10n-XX'


def fixture():
	try:
		tools.call(
			'svn',
			'checkout',
			'http://forge.univention.org/svn/dev/branches/ucs-4.1/ucs-4.1-4/management')
		tools.call(
			'univention-ucs-translation-build-package',
			'--source={}'.format('.'),
			'--languagecode=XX',
			'--locale=fr_FR.UTF-8:UTF-8',
			'--language-name=TEST0')
		tools.call('univention-ucs-translation-fakemessage', TRANSLATION_PKG_NAME)
	except tools.InvalidCommandError:
		utils.fail("Error during test execution.")


def _entry_is_fuzzy(changed_entry, po_file_path):
	po_file = polib.pofile(po_file_path)
	found_change = False
	for fuzzy in po_file.fuzzy_entries():
		if fuzzy.occurrences == changed_entry.occurrences:
			found_change = True
	return found_change


def _change_entry_in_source_file(source_pkg_path, po_entry):
	for source_file, line_number in po_entry.occurrences:
		source_file_path = os.path.join(source_pkg_path, source_file)
		original_source_file = '{}.orig'.format(source_file_path)
		os.rename(source_file_path, original_source_file)
		with open(source_file_path, 'w') as changed_source, open(original_source_file, 'r') as fd:
			for i, line in enumerate(fd):
				if i == int(line_number) - 1:
					logging.info('Attempting to change %s in line %s', source_file, line_number)
					lhs, msgid_from_source = line.split('_(', 1)
					msgid_from_source = msgid_from_source.replace(po_entry.msgid[0:1], 'C!', 1)
					line = lhs + '_(' + msgid_from_source
				changed_source.write(line)
		os.unlink(original_source_file)


def _entry_is_obsolete(entry, po_path):
	for obsolete in polib.pofile(po_path).obsolete_entries():
		if obsolete.msgid == entry.msgid and obsolete.msgstr == entry.msgstr:
			return True
	return False


def _count_chars_in_msgid_and_msgstr(po_file_path):
	total_chars = int()
	for entry in polib.pofile(po_file_path):
		total_chars += len(entry.msgid)
		total_chars += len(entry.msgstr)
	return total_chars


if __name__ == '__main__':
	tmp_dir = mkdtemp(prefix='translation-template-test-00-')
	os.chdir(tmp_dir)
	logging.basicConfig(level='DEBUG')
	# TODO: Static seed not enough to make it reproducible. File and directory
	# lists have to be sorted
	static_seed = int(time())
	logging.debug('Seed for this test: %s', str(static_seed))
	rand = random.Random(static_seed)
	fixture()
	changes = list()
	po_paths = tools.get_matching_file_paths(TRANSLATION_PKG_NAME, "*.po")
	po_paths_total_chars = {path: _count_chars_in_msgid_and_msgstr(path) for path in po_paths}
	i = int()
	while i < 20:
		random_po_path = rand.choice(po_paths)
		po_paths.remove(random_po_path)
		copy_file(random_po_path, '{}.pre_change'.format(random_po_path))
		random_po = polib.pofile(random_po_path)
		if not random_po:
			logging.debug('Choose empty PO file: %s', random_po_path)
			continue
		random_entry = rand.choice(random_po)
		logging.debug('Occurences for entry: %s', (random_entry.occurrences))
		if not random_entry.occurrences:
			logging.info('Choose a xml PO file')
			continue
		i += 1
		source_pkg_path = '/'.join(random_po_path.split('/')[2:4])
		_change_entry_in_source_file(source_pkg_path, random_entry)
		changes.append((random_po_path, random_entry))

	tools.call('univention-ucs-translation-merge', '.', TRANSLATION_PKG_NAME)

	# Total char count must be equal or increased(for files in list 'changes')
	# for every file.
	failed = False
	for path, total_chars in po_paths_total_chars.iteritems():
		if not os.path.isfile(path):
			logging.info("Missing PO file after merge: %s", path)
			failed = True
		if total_chars > _count_chars_in_msgid_and_msgstr(path):
			logging.info("Count of chars in msgid and msgstr smaller after merge for file: %s", path)
			failed = True
	if failed:
		utils.fail("Unexpected char count in PO files or PO files missing. See log for details.")

	for po_path, changed_entry in changes:
		if not _entry_is_fuzzy(changed_entry, po_path):
			# Sometimes msgmerges fuzzy matching does not match the change and
			# appends the entry as a comment to the end of the file
			if _entry_is_obsolete(changed_entry, po_path):
				logging.debug('Change not matched by fuzzy matching in PO file: %s', po_path)
			else:
				failed = True
				logging.info('Failure in PO file: %s', po_path)
				logging.info('Failure: Changed entry was neither fuzzy matched nor append as a comment(obsoleted).')

	if failed:
		utils.fail('Translation template test failed. See log for further information.')
	remove_tree(tmp_dir)
