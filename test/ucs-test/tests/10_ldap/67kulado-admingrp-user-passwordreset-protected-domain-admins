#!/usr/share/ucs-test/runner python2.7
## desc: Tests that Domain Admins members are protected by default
## roles:
##  - domaincontroller_master
##  - domaincontroller_backup
## packages:
##  - univention-admingrp-user-passwordreset
## exposure: dangerous

from __future__ import print_function
from univention.testing.utils import fail
from univention.testing.ucr import UCSTestConfigRegistry
from univention.testing.udm import UCSTestUDM
import univention.testing.strings as uts
import time

default_password = 'univention'


class Account(object):
	def __init__(self, description, dn, name, password=default_password):
		self.description = description
		self.dn = dn
		self.name = name
		self.password = password

	def __str__(self):
		return '%s "%s"' % (self.description, self.name)

with UCSTestConfigRegistry() as ucr:

	with UCSTestUDM() as udm:
		## TODO: Better don't guess DN, use ldapsearch to get DN of "cn=Domain Admins"
		domain_admins_dn = "cn=Domain Admins,cn=groups,%(ldap/base)s" % ucr
		user_password_admins_dn = "cn=User Password Admins,cn=groups,%(ldap/base)s" % ucr

		#create user
		try:
			what = 'Plain user'
			user_dn, user_name = udm.create_user()
			plain_user = Account(what, user_dn, user_name)
		except Exception as exc:
			fail('Creating %s failed: %s' % (what, exc))
		else:
			print('Created %s' % (plain_user,))

		#create helpdesk user
		try:
			what = 'Helpdesk user'
			helpdesk_user_dn, helpdesk_user_name = udm.create_user()
			helpdesk_user = Account(what, helpdesk_user_dn, helpdesk_user_name)
		except Exception as exc:
			fail('Creating %s failed: %s' % (what, exc))
		else:
			print('Created %s' % (helpdesk_user,))

		# Create domainadmin1
		try:
			what = 'Domain Admin 1'
			domainadmin1_dn, domainadmin1_name = udm.create_user()
			domainadmin1 = Account(what, domainadmin1_dn, domainadmin1_name)
		except Exception as exc:
			fail('Creating %s failed: %s' % (what, exc))
		else:
			print('Created %s' % (domainadmin1,))

		# Make domainadmin1 a group member of "Domain Admins"
		try:
			udm.modify_object("users/user",
				dn=domainadmin1.dn,
				set={
					'groups': [domain_admins_dn]
			})
		except Exception as exc:
			fail('Could not add %s to the group "Domain Admins": %s' % (domainadmin1, exc))
		else:
			print('Added %s to the group "Domain Admins"' % (domainadmin1,))

		# Create domainadmin2
		try:
			what = 'Domain Admin 2'
			domainadmin2_dn, domainadmin2_name = udm.create_user()
			domainadmin2 = Account(what, domainadmin2_dn, domainadmin2_name)
		except Exception as exc:
			fail('Creating %s failed: %s' % (what, exc))
		else:
			print('Created %s' % (domainadmin2,))

		# Make domainadmin2 a *primary* member of group "Domain Admins"
		try:
			udm.modify_object("users/user",
				dn=domainadmin2.dn,
				set={
					'primaryGroup': [domain_admins_dn]
			})
		except Exception as exc:
			fail('Cannot set the  primary group of %s to "Domain Admins": %s' % (domainadmin2, exc))
		else:
			print('Primary group of %s set to "Domain Admins"' % (domainadmin2,))

		# Set group of helpdesk user to User Password Admins
		try:
			udm.modify_object("users/user",
				dn=helpdesk_user.dn,
				set={
					"groups": user_password_admins_dn
			})
		except Exception as exc:
			fail('Could not add %s to group "User Password Admins": %s' % (helpdesk_user, exc))
		else:
			print('OK: Added %s to group "User Password Admins"' % (helpdesk_user,))

		time.sleep(35)

		#Test if Helpdesk user can reset password of admin
		try:
			udm.modify_object('users/user',
				binddn=helpdesk_user.dn,
				bindpwd=helpdesk_user.password,
				dn=domainadmin1.dn,
				set={
					'password': uts.random_string()
			})
		except Exception:
			print('OK: %s cannot reset password of %s, as expected' % (helpdesk_user, domainadmin1))
		else:
			fail('%s reset password of %s, but should not be able to' % (helpdesk_user, domainadmin1))

		#Test if Helpdesk user can reset password of admin2
		try:
			udm.modify_object('users/user',
				binddn=helpdesk_user.dn,
				bindpwd=helpdesk_user.password,
				dn=domainadmin2.dn,
				set={
					'password': uts.random_string()
			})
		except Exception:
			print('OK: %s cannot reset password of %s' % (helpdesk_user, domainadmin2))
		else:
			fail('%s reset password of %s, but should not be able to' % (helpdesk_user, domainadmin2))

		#Test if Helpdesk user can reset password of user
		try:
			udm.modify_object('users/user',
				binddn=helpdesk_user.dn,
				bindpwd=helpdesk_user.password,
				dn=plain_user.dn,
				set={
					'password': uts.random_string()
			})
		except Exception as exc:
			fail('%s cannot reset password of %s: %s' % (helpdesk_user, plain_user, exc))
		else:
			print('OK: %s reset password of %s' % (helpdesk_user, plain_user))

# vim: set ft=python ts=4 noexpandtab :
