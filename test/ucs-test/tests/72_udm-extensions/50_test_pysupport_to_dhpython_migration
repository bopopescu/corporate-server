#!/usr/share/ucs-test/runner python
## desc: Check the migration of extensions created prior to bug 50401
## tags: [udm-ldapextensions,apptest]
## roles: [domaincontroller_master,domaincontroller_backup,domaincontroller_slave,memberserver]
## exposure: dangerous
## bugs: [50401]
## packages:
##   - univention-directory-manager-tools
##   - python-support

from __future__ import print_function
import univention.testing.udm as udm_test
from univention.config_registry import ConfigRegistry
from univention.testing.utils import verify_ldap_object, wait_for_replication, retry_on_error, LDAPObjectNotFound
from univention.testing.strings import random_name, random_version, random_ucs_version
import univention.testing.udm_extensions as udm_ext
import os
import subprocess
import bz2
import base64


PYSHARED_DIR = '/usr/share/pyshared/'
PYMODULES_DIR = '/usr/lib/pymodules/python2.7/'
PYTHON_DIR = '/usr/lib/python2.7/dist-packages/'
PYSUPPORT_DIR = '/usr/share/python-support/'


def get_pysupport_filename(extension_type, extension_filename):
	pysupport_basename = 'univentionUDM{}_{}.public'.format(
		extension_type.capitalize(),
		extension_filename.replace('/', '_').replace('.py', '')
	)
	pysupport_filename = os.path.join(PYSUPPORT_DIR, pysupport_basename)
	return pysupport_filename


def create_extension(udm, extension_type):
	ucr = ConfigRegistry()
	ucr.load()
	print('========================= TESTING EXTENSION %s =============================' % extension_type)
	active = 'TRUE'
	extension_name = udm_ext.get_extension_name(extension_type)
	extension_filename = udm_ext.get_extension_filename(extension_type, extension_name)
	extension_buffer = udm_ext.get_extension_buffer(extension_type, extension_name)

	package_name = udm_ext.get_package_name()
	package_version = udm_ext.get_package_version()
	app_id = '%s-%s' % (random_name(), random_version())
	version_start = random_ucs_version(max_major=2)
	version_end = random_ucs_version(min_major=5)

	position = 'cn=udm_%s,cn=univention,%s' % (extension_type, ucr['ldap/base'])
	try:
		verify_ldap_object(position, retry_count=0)
	except LDAPObjectNotFound:
		udm.create_object(
			'container/cn',
			name='udm_%s' % (extension_type,),
			position='cn=univention,%s' % (ucr['ldap/base'], )
		)
	verify_ldap_object(position, retry_count=1)

	dn = udm.create_object(
		'settings/udm_%s' % extension_type,
		name=extension_name,
		data=base64.b64encode(bz2.compress(extension_buffer)),
		filename=extension_filename,
		packageversion=package_version,
		appidentifier=app_id,
		package=package_name,
		ucsversionstart=version_start,
		ucsversionend=version_end,
		active=active,
		position=position
	)

	wait_for_replication()

	verify_ldap_object(dn, {
		'cn': [extension_name],
		'univentionUDM%sFilename' % extension_type.capitalize(): [extension_filename],
		'univentionOwnedByPackage': [package_name],
		'univentionObjectType': ['settings/udm_%s' % extension_type],
		'univentionOwnedByPackageVersion': [package_version],
		'univentionUDM%sData' % extension_type.capitalize(): [bz2.compress(extension_buffer)],
		'univentionAppIdentifier': [app_id],
		'univentionUCSVersionStart': [version_start],
		'univentionUCSVersionEnd': [version_end],
		'univentionUDM%sActive' % (extension_type.capitalize(), ): [active],
	})
	assert os.path.exists(udm_ext.get_absolute_extension_filename(extension_type, extension_filename))
	return extension_filename


def downgrade_extension_to_pysupport(extension_type, extension_filename):
	current_path = udm_ext.get_absolute_extension_filename(extension_type, extension_filename)
	assert os.path.exists(current_path)
	downgrade_path = current_path.replace(PYTHON_DIR, PYSHARED_DIR)
	try:
		os.mkdir(os.path.dirname(downgrade_path))
	except OSError:
		pass
	os.rename(current_path, downgrade_path)
	os.rename(current_path + 'c', downgrade_path + 'c')

	pysupport_filename = get_pysupport_filename(extension_type, extension_filename)
	with open(pysupport_filename, 'w') as pysupport_file:
		pysupport_file.write(downgrade_path)
	subprocess.check_call(['update-python-modules', os.path.basename(pysupport_filename)])
	assert not os.path.exists(current_path)
	assert os.path.exists(downgrade_path)
	assert os.path.exists(current_path.replace(PYTHON_DIR, PYMODULES_DIR))


def test_migration():
	def check_migrated_file():
		if not os.path.exists(migrated_file):
			raise AssertionError

	def check_non_migrated_file():
		if os.path.exists(migrated_file.replace(PYTHON_DIR, PYSHARED_DIR)):
			raise AssertionError
		if os.path.exists(migrated_file.replace(PYTHON_DIR, PYMODULES_DIR)):
			raise AssertionError
		if os.path.exists(get_pysupport_filename(extension_type, extension_filename)):
			raise AssertionError

	for extension_type in ('hook', 'syntax', 'module'):
		with udm_test.UCSTestUDM() as udm:
			extension_filename = create_extension(udm, extension_type)
			downgrade_extension_to_pysupport(extension_type, extension_filename)
			subprocess.check_call(['univention-directory-listener-ctrl', 'resync', 'udm_extension'])
			migrated_file = udm_ext.get_absolute_extension_filename(extension_type, extension_filename)
			retry_on_error(check_migrated_file, AssertionError, delay=2)
			retry_on_error(check_non_migrated_file, AssertionError, delay=2)


if __name__ == '__main__':
	test_migration()
