@%@UCRWARNING=# @%@
#  /etc/rsyslog.conf	Configuration file for rsyslog.
#
#			For more information see
#			/usr/share/doc/rsyslog-doc/html/rsyslog_conf.html

######################
#### Message size ####
######################
#
# Important: In order for this directive to work correctly,
# it must be placed right at the top of rsyslog.conf
# (before loading modules)
#
@!@
print '$MaxMessageSize %s' % (configRegistry.get("syslog/maxmessagesize", '4k'),)
@!@

#################
#### MODULES ####
#################

$ModLoad imuxsock # provides support for local system logging
@!@
print '$SystemLogRateLimitInterval %s' % (configRegistry.get('syslog/limit/interval', '5'),)
print '$SystemLogRateLimitBurst %s' % (configRegistry.get('syslog/limit/burst', '200'),)
@!@
$ModLoad imklog   # provides kernel logging support
#$ModLoad immark  # provides --MARK-- message capability

@!@
from os.path import exists
import platform
if '32bit' in platform.architecture()[0]:
	mod_path = '/usr/lib/i386-linux-gnu/rsyslog'
else:
	mod_path = '/usr/lib/x86_64-linux-gnu/rsyslog'
for (typ, cfg) in [('udp', 'UDP'), ('tcp', 'InputTCP'), ('relp', 'InputRELP')]:
	print '# provides %s syslog reception' % (typ.upper(),)
	mod = '%s/im%s.so' % (mod_path, typ,)
	port = configRegistry.get('syslog/input/%s' % (typ,))
	pfx = '' if port and exists(mod) else '#'
	print '%s$ModLoad im%s' % (pfx, typ)
	print '%s$%sServerRun %s' % (pfx, cfg, port or 514)
	print
@!@

###########################
#### GLOBAL DIRECTIVES ####
###########################

#
# Use traditional timestamp format.
# To enable high precision timestamps, comment out the following line.
#
@!@
print '$ActionFileDefaultTemplate %s' % (configRegistry.get('syslog/template/default', 'RSYSLOG_TraditionalFileFormat'),)
@!@

#
# Set the default permissions for all log files.
#
$FileOwner root
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022

#
# Where to place spool and state files
#
$WorkDirectory /var/spool/rsyslog

#
# Include all config files in /etc/rsyslog.d/
#
$IncludeConfig /etc/rsyslog.d/*.conf


###############
#### RULES ####
###############

@!@
remote_list = filter(None, configRegistry.get('syslog/remote', '').split())
if remote_list:
	selector = configRegistry.get('syslog/remote/selector', '*.*')
	fallback_list = filter(None, configRegistry.get('syslog/remote/fallback', '').split())
	if any(server.startswith(':omrelp:') for server in remote_list + fallback_list):
		print '$ModLoad omrelp'
	for server in remote_list:
		print '%s	%s' % (selector, server)
		if fallback_list:
			print '$ActionExecOnlyWhenPreviousIsSuspended on'
			for fallback in fallback_list:
				print '&	%s' % (fallback,)
			print '$ActionExecOnlyWhenPreviousIsSuspended off'
@!@

#
# First some standard log files.  Log by facility.
#
@!@
duplicates = set()
def syslog(key, template, default=True):
	if configRegistry.is_true('syslog/%s' % (key,), default):
		print template.strip()
		duplicates.add('%s.none' % (key,))
		return True

if syslog('auth', "auth,authpriv.*			/var/log/auth.log"):
	duplicates.add('authpriv.none')

syslog('cron', "cron.*				/var/log/cron.log", False)
syslog('daemon', "daemon.*			-/var/log/daemon.log")
syslog('kern', "kern.*				-/var/log/kern.log")
syslog('lpr', "lpr.*				-/var/log/lpr.log")
if syslog('mail', r"""
mail.*				-/var/log/mail.log

#
# Logging for the mail system.  Split it up so that
# it is easy to write scripts to parse these files.
#
mail.info			-/var/log/mail.info
mail.warn			-/var/log/mail.warn
mail.err			/var/log/mail.err
""") and configRegistry.is_true("syslog/mail/mirrorto/syslog", False):
		duplicates.discard('mail.none')

syslog('user', "user.*				-/var/log/user.log")
syslog('news', r"""
#
# Logging for INN news system.
#
news.crit			/var/log/news/news.crit
news.err			/var/log/news/news.err
news.notice			-/var/log/news/news.notice
""")

if configRegistry.is_true("syslog/syslog", True):
	selector = configRegistry.get('syslog/syslog/selector')
	if not selector:
		selectors = ['*.*', 'auth,authpriv.none']
		if configRegistry.is_true("syslog/syslog/avoid_duplicate_messages", False):
			selectors.extend(duplicates)
		elif configRegistry.is_false("syslog/mail/mirrorto/syslog", True):
			selectors.append('mail.none')
		selector = ';'.join(selectors)
	print "%s			-/var/log/syslog" % (selector,)
@!@


#
# Some "catch-all" log files.
#
@!@
def syslog(key, selector, target, default=True):
	if configRegistry.is_true('syslog/%s' % (key,), default):
		selector = configRegistry.get('syslog/%s/selector' % (key,)) or selector.strip()
		print "%s		%s" % (selector, target)

syslog('debug', r"""
*.=debug;\
	auth,authpriv.none;\
	news.none;mail.none""", "-/var/log/debug")
syslog('messages', r"""
*.=info;*.=notice;*.=warn;\
	auth,authpriv.none;\
	cron,daemon.none;\
	mail,news.none""", "-/var/log/messages")

print r"""
#
# Emergencies are sent to everybody logged in.
#
*.emerg				:omusrmsg:*

#
# I like to have messages displayed on the console, but only on a virtual
# console I usually leave idle.
#
#daemon,mail.*;\
#	news.=crit;news.=err;news.=notice;\
#	*.=debug;*.=info;\
#	*.=notice;*.=warn	/dev/tty8

# The named pipe /dev/xconsole is for the `xconsole' utility.  To use it,
# you must invoke `xconsole' with the `-file' option:
# 
#    $ xconsole -file /dev/xconsole [...]
#
# NOTE: adjust the list below, or you'll go crazy if you have a reasonably
#      busy site..
#
"""
syslog('xconsole', r"""
daemon.*;mail.*;\
	news.err;\
	*.=debug;*.=info;\
	*.=notice;*.=warn""", "|/dev/xconsole")
@!@
