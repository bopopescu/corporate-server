@%@UCRWARNING=# @%@

# URIs to check for running guests
# example: URIS='default qemu:///system vbox+tcp://host/system lxc:///'
#URIS=default
@!@
# Set URI to an empty value if the shutdown action is set to ignore
if configRegistry.get('uvmm/libvirt/action/shutdown', '') == 'ignore':
	print 'URIS=""'
elif 'uvmm/libvirt/action/uris' in configRegistry:
	print 'URIS=%(uvmm/libvirt/action/uris)s' % configRegistry
@!@

# action taken on host boot
# - start   all guests which were running on shutdown are started on boot
#           regardless on their autostart settings
# - ignore  libvirt-guests init script won't start any guest on boot, however,
#           guests marked as autostart will still be automatically started by
#           libvirtd
#ON_BOOT=start
@!@
if 'uvmm/libvirt/action/boot' in configRegistry: print 'ON_BOOT=%(uvmm/libvirt/action/boot)s' % configRegistry
@!@

# action taken on host shutdown
# - suspend   all running guests are suspended using virsh managedsave
# - shutdown  all running guests are asked to shutdown. Please be careful with
#             this settings since there is no way to distinguish between a
#             guest which is stuck or ignores shutdown requests and a guest
#             which just needs a long time to shutdown. When setting
#             ON_SHUTDOWN=shutdown, you must also set SHUTDOWN_TIMEOUT to a
#             value suitable for your guests.
#ON_SHUTDOWN=suspend
@!@
if 'uvmm/libvirt/action/shutdown' in configRegistry: print 'ON_SHUTDOWN=%(uvmm/libvirt/action/shutdown)s' % configRegistry
@!@

# number of seconds we're willing to wait for a guest to shut down
#SHUTDOWN_TIMEOUT=30
@!@
if 'uvmm/libvirt/action/shutdown_timeout' in configRegistry: print 'SHUTDOWN_TIMEOUT=%(uvmm/libvirt/action/shutdown_timeout)s' % configRegistry
@!@
