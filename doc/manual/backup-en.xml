<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="backup:Data_backup_with_Bacula"><title>Data backup with Bacula</title>

	<section id="backup:Introduction"><title>Introduction</title>
		<para>
Bacula is a network-enabled data backup solution with a client/server
architecture. It allows data backup and restore in heterogeneous
environments.
This chapter refers to the <package>univention-bacula</package> package
which is delivered as a component of UCS. Other backup solutions can be
selected and installed in the Univention App Center, including Bacula
Enterprise.
		</para>
		<para>
Bacula is composed of a range of individual services and programs,
which control the various aspects of the data backup:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
The <emphasis>director daemon</emphasis> is the central control unit in
which most settings for backup and restore are saved. The remaining
Bacula services are configured in the director.
				</simpara>
			</listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem>
				<simpara>
The <emphasis>storage daemon</emphasis> controls access to the backup
media (e.g., a tape library or hard drive) and receives the instructions
from the <emphasis>director</emphasis> about which systems should be
backed up or restored.
				</simpara>
			</listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem>
				<simpara>
The <emphasis>file daemon</emphasis> is installed on the clients and
receives the instructions of the <emphasis>director</emphasis> about
which files should be backed up or restored via which <emphasis>storage
daemon</emphasis>.
				</simpara>
			</listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem>
				<simpara>
The <emphasis>catalog</emphasis> saves all the backups in a database and
allows the restore of individual files or directories.
				</simpara>
			</listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem>
				<simpara>
The <emphasis>Bacula console</emphasis> is the central user interface
for the <emphasis>director daemon</emphasis>. The backup / restore jobs
can be started here. It can also be used to perform administrative tasks
- such as the integration of backup media - and requesting status
information.
				</simpara>
			</listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem>
				<simpara>
The <emphasis>Bacula administration tool</emphasis> is a graphic version
of the Bacula console.
				</simpara>
			</listitem>
		</itemizedlist>
		<para>
The backup settings (data to be backed up, backup mode and times) are
thus configured in the <emphasis>director daemon</emphasis> and the
backup started automatically or via the <emphasis>Bacula
console</emphasis>. The <emphasis>file daemon</emphasis> then supplies
the data to be backed up to the <emphasis>storage daemon</emphasis>,
which is responsible for saving the data on physical media. In addition,
meta information concerning the backups are also saved in a database via
the <emphasis>catalog</emphasis>.
		</para>
		<figure id="backup:bacula"><title>Bacula Schema</title>
			<graphic scalefit="1" width="60%" align="center" fileref="illustrations44/bacula_en.png"/>
		</figure>
	</section>

	<section id="backup:data">
	  <title>Scope of backup on a UCS system</title>
	  <para>
		If there is sufficient storage capacity available, it is recommended to back up the complete
		system. However, not all the data on a UCS system need to be backed up. For example, the
		program packages delivered with UCS are available after reinstallation anyway.
	  </para>

	  <para>
		The following information gives an overview of a typical system. Deviations are possible
		depending on the software installed. This must be checked in each case and carefully tested
		with a test restore run!
	  </para>

	  <para>
		The <filename class="directory">/dev/</filename>, <filename class="directory">/proc/</filename> and <filename class="directory">/sys/</filename>
		directories only contain files automatically generated by the kernel, so they do not need to
		be backed up.
	  </para>

	  <para>
		These files should generally always be backed up: The <filename class="directory">/home/</filename> and
		<filename class="directory">/root</filename> directories contain user data, the configuration of the UCS
		system is backed up in <filename class="directory">/etc/</filename> and the <filename class="directory">/var/</filename>
		directory includes runtime data such as the mails of a mail server.
	  </para>

	  <para>
		The <filename class="directory">/bin/</filename>, <filename class="directory">/boot/</filename>, <filename class="directory">/lib/</filename>,
		<filename class="directory">/usr/</filename> and <filename class="directory">/sbin/</filename> directories usually only include
		programs and data delivered with the UCS installation.
	  </para>
	</section>

	<section id="backup:Installation"><title>Installation</title>
		<para>
In this documentation it is assumed that the <emphasis>director
daemon</emphasis>, <emphasis>storage daemon</emphasis> and
<emphasis>catalog</emphasis> are present on one a system, the Bacula
server. These components are set up by installing the
<package>univention-bacula</package> package.
		</para>
		<para>
The <emphasis>file daemon</emphasis> must be installed on all the
systems on which data are to be backed up using the
<package>bacula-client</package> package.
		</para>
		<para>
The storage of the catalog data is performed in a PostgreSQL database,
which is created during installation. The access information for this
database (database name, name/password of database user) are then
available in the
<filename>/etc/dbconfig-common/bacula-director-pgsql.conf</filename>
file in the <varname>dbc_dbpass</varname> and
<varname>dbc_dbuser</varname> fields.
		</para>
	</section>

	<section id="backup:Configuration_of_the_backup_components"><title>Configuration of the backup components</title>
		<para>
The configuration of the Bacula services is performed via various
configuration files. The following text explains important options;
further configuration options are described in the Bacula documentation.
		</para>
		<section id="bacula:directory"><title>Directory Daemon</title>
			<para>
The directory daemon is managed via the <emphasis>Director</emphasis>
section of the <filename>/etc/bacula/bacula-dir.conf</filename> file.
			</para>
			<para>
The default values can be kept, only the <varname>DirAddress</varname>
option should be changed from <systemitem class="ipaddress">127.0.0.1</systemitem>, in other
words <systemitem class="systemname">localhost</systemitem>, to the IP address of the Bacula server. In
addition, the <varname>Password</varname> field should be configured
			</para>
			<programlisting>
Director {
  Name = sec-dir
  DIRport = 9101
  QueryFile = "/etc/bacula/scripts/query.sql"
  WorkingDirectory = "/var/lib/bacula"
  PidDirectory = "/var/run/bacula"
  Maximum Concurrent Jobs = 1
  Password = "master-dir-password"
  Messages = Daemon
  DirAddress = 192.0.2.125
}
			</programlisting>
		</section>
		<section id="backup:Storage"><title>Storage</title>
			<para>
The storage daemon is managed via the <emphasis>Storage</emphasis>
section of the <filename>/etc/bacula/bacula-sd.conf</filename> file.
			</para>
			<para>
Here the default values can largely be retained; only the
<varname>SDAddress</varname> option needs to be adapted to the IP
address of the storage daemon.
			</para>
			<programlisting>
Storage {
  Name = sec-sd
  SDPort = 9103
  WorkingDirectory = "/var/lib/bacula"
  Pid Directory = "/var/run/bacula"
  Maximum Concurrent Jobs = 20
  SDAddress = 192.0.2.125
}
			</programlisting>
			<para>
The <emphasis>Director</emphasis> section refers to the Bacula server
and a password is set that the server must use for access:
			</para>
			<programlisting>
Director {
  Name = sec-dir
  Password = "master-storage-password"
}
			</programlisting>
		</section>
		<section id="backup:File_Daemon"><title>File Daemon</title>
			<para>
The file daemon is managed via the configuration file
<filename>/etc/bacula/bacula-fd.conf</filename> and must be set up on
all systems that are to be backed up.
			</para>
			<para>
In the <emphasis>Director</emphasis> section, the
<varname>Name</varname> option should be set to the name of the
<varname>director</varname> (see <xref
linkend="bacula:directory"/>). A client password must be set for every
system. In addition, the <varname>FDAddress</varname> option in the
<wordasword>FileDaemon</wordasword> section should be set to the computer's
IP address.
			</para>
			<programlisting>
Director {
  Name = sec-dir
  Password = "client-password"
}
			</programlisting>
			<programlisting>
FileDaemon {
  Name = sec-fd
  FDport = 9102
  WorkingDirectory = /var/lib/bacula
  Pid Directory = /var/run/bacula
  Maximum Concurrent Jobs = 20
  FDAddress = 192.0.2.125
}
			</programlisting>
			<para>
Every computer to be backed up must also be registered in the
<filename>/etc/bacula/bacula-dir.conf</filename> file in the director
with the password specified above:
			</para>
			<programlisting>
Client {
  Name = client-host
  Address = 192.0.2.125
  FDPort = 9102
  Catalog = MyCatalog
  Password = "client-password"
  File Retention = 30 days
  Job Retention = 6 months
  AutoPrune = yes
}
			</programlisting>
		</section>
		<section id="backup:Bacula_Console"><title>Bacula Console</title>
			<para>
The Bacula console is managed in the
<filename>/etc/bacula/bconsole.conf</filename> configuration file.
			</para>
			<para>
Here, the address of the computer on which the director daemon is
running and its password must be entered in the
<emphasis>Director</emphasis> section (see <xref
linkend="bacula:directory"/>):
			</para>
			<programlisting>
  Name = localhost-dir
  DIRport = 9101
  address = 192.0.2.125
  Password = "master-dir-password"
			</programlisting>
		</section>
		<section id="backup:Firewall_adjustments"><title>Firewall adjustments</title>
			<para>
In the basic Univention Firewall setting, the incoming packages are
blocked/refused for all ports.
			</para>
			<para>
The ports used for Bacula must be approved accordingly. Access to the
file daemon must be permitted on all systems. This is done by setting
the &ucsUCRV;
<envar>security/packetfilter/package/bacula/tcp/9102/all</envar> to
<literal>ACCEPT</literal> and then restarting Univention Firewall.
			</para>
			<para>
Port 9103 must also be approved in the same way on the Bacula server.
			</para>
			<para>
In a distributed setup, it may be necessary to permit the ports
9101/TCP (connections from the console to the directory) and 9103/TCP
(connections from the directory and file daemon to the storage daemon)
as well.
			</para>
		</section>
	</section>

	<section id="backup:Configuration_of_the_backup_interval_data_etc"><title>Configuration of the backup (interval, data, etc.)</title>
		<para>
In Bacula one can define <emphasis>resources</emphasis> which when
combined in a <emphasis>job</emphasis> represent a certain action, such
as the backup of X data from Y computer on the Z medium. Among others,
the following resources are available:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
Access to physical backup media is defined in a
<emphasis>device</emphasis>, e.g., the type of device and how it is
connected.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
The different backup media (e.g., tapes or hard drives) are identified
as <emphasis>volumes</emphasis>. Volumes can be created manually or
directly by the director. Bacula furnishes the volumes with software
labels for identification.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
Bacula manages the volumes in <emphasis>pools</emphasis>. Any number of
volumes can be combined and their properties defined. Backups are only
performed for pools. When doing so, Bacula manages the utilization of
the volumes and monitors when volumes can be overwritten again.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
A <emphasis>schedule</emphasis> defines when an action is performed.
Additional options for an action can also be set or overwritten here.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
A <wordasword>FileSet</wordasword> defines which files or directories should
be backed up, whether they should be compressed and which meta
information (e.g., ACLs) should be backed up.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
Every computer from which the data should be backed up is treated as a
<emphasis>client</emphasis> in Bacula. <emphasis>Client</emphasis> jobs
define which computer is referred to and how the <emphasis>file
daemon</emphasis> of the client can be accessed (e.g., password).
				</simpara>
			</listitem>
		</itemizedlist>
		<para>
A <emphasis>job</emphasis> combines all of the information above. There
are two types of job: restore and backup. In addition, the backup
process of the backups (incremental, complete or differential backing
up) is also defined here.
		</para>
		<para>
<emphasis>Messages</emphasis> are used to define how to handle Bacula
status messages. Messages can be saved in log files, displayed on the
console or sent by e-mail, for example.
		</para>
		<para>
<biblioref linkend="bacula-config-example"/> includes an example
configuration which can be used as a template for backups and described
the resources outline above in more detail.
		</para>
	</section>

	<section id="backup:Administration_via_the_Bacula_console"><title>Administration via the Bacula console</title>
		<para>
The <emphasis>Bacula console</emphasis> can be used to export
information about the status of Bacula, start backup jobs or restore
data. It is started with the <command>bconsole</command> command.
		</para>
		<para>
The <command>status</command> command displays status information. A
list of the director's upcoming, running and ended jobs is exported.
		</para>
		<para>
Backup jobs can be started automatically, e.g., every weekday. Backups
and restores can also be started interactively via the Bacula console:
		</para>
		<itemizedlist>
			<listitem>
				<simpara>
The <command>run</command> command can be used to start a job. In
addition, a list of available jobs is displayed from which one has to
select the required job. The <command>mod</command> command can be used
to set and change options such as the backup type for the job.
Confirming with <userinput>yes</userinput> starts the job.
				</simpara>
			</listitem>
			<listitem>
				<simpara>
The <command>restore</command> command can be used to restore data.
<command>3 (Enter list of comma separated JobIds to select)</command>
can now be used to select a backup job from which the data should be
restored. A file browser then opens in which one can browse using the
standard commands <command>cd</command> and <command>ls</command>.
<command>mark FILE</command> and <command>mark -r DIR</command> select
files and directories respectively for the restore. Once all the
required data are selected, the file browser is exited with
<command>done</command>. Once the client is specified and some options
for the restore job confirmed (e.g., where the data should be copied
to), the job can be started with <userinput>yes</userinput>. The selected
data will be saved in the configured restore directory. If a tape is
required for a backup or restore and it is not in the drive, Bacula
requests the tape explicitly
				</simpara>
			</listitem>
		</itemizedlist>
		<para>
Further information on the Bacula console can be found in the Bacula
documentation or via the <command>help</command> command.
		</para>
	</section>

	<section id="backup:Backup_of_the_catalog_database"><title>Backup of the catalog database</title>
		<para>
The meta data of the backup are stored in the catalog. As standard, the
catalog is stored in a PostgreSQL database, which should also be backed
up. This is performed via a backup job, which saves an SQL dump of the
database.
		</para>
		<programlisting>
# Backup the catalog database (after the nightly save)
Job {
  Name = "BackupCatalog"
  JobDefs = "DefaultJob"
  Level = Full
  FileSet="Catalog"
  Schedule = "WeeklyCycleAfterBackup"
  # This creates an ASCII copy of the catalog
  # Arguments to make_catalog_backup.pl are:
  #  make_catalog_backup.pl catalog-name
  RunBeforeJob = "/etc/bacula/scripts/make_catalog_backup.pl MyCatalog"
  # This deletes the copy of the catalog
  RunAfterJob = "/etc/bacula/scripts/delete_catalog_backup"
  Write Bootstrap = "/var/lib/bacula/%n.bsr"
  Priority = 11
}

...

# This schedule does the catalog. It starts after the WeeklyCycle
Schedule {
  Name = "WeeklyCycleAfterBackup"
  Run = Full sun-sat at 23:10
}

...

# This is the backup of the catalog
FileSet {
  Name = "Catalog"
  Include {
    Options {
      signature = MD5
    }
    File = "/var/lib/bacula/bacula.sql"
  }
}
		</programlisting>
		<para>
The instructions <varname>RunBeforeJob</varname> and
<varname>RunAfterJob</varname> are run before and after the actual
backing up of the scripts respectively. In the case of the catalog,
<command>make_catalog_backup</command> is used prior to the backup
to create an SQL dump of the catalog database and saved under
<filename>/var/lib/bacula/bacula.sql</filename>. This file is then
deleted again following successful backup.
		</para>
		<para>
In addition, <varname>Write Bootstrap</varname> is used to generate a
bootstrap file for the backup of the catalog. This file documents how
the data can be restored, i.e., on which volume they are saved and where
on the volume they are. This is normally performed by the catalog
itself, but for the backup of the catalog itself, a bootstrap file is
required. It should also be backed up independently of Bacula.
		</para>
		<para>
The backup job for the catalog with the corresponding
<wordasword>FileSet</wordasword> and <emphasis>Schedule</emphasis> is
available as a template in the configuration of the <emphasis>director
daemon</emphasis> and merely needs to be adjusted.
		</para>
	</section>

	<section id="backup:Further_information"><title>Further information</title>
		<para>
Further information on the setup of Bacula is available on the following
websites:
		</para>
		<itemizedlist>
			<listitem><simpara><ulink url="http://www.bacula.org/"/></simpara></listitem>
			<listitem><simpara><ulink url="http://wiki.bacula.org/doku.php"/></simpara></listitem>
			<listitem><simpara><ulink url="http://www.bacula.org/5.2.x-manuals/en/main/main.pdf"/></simpara></listitem>
			<listitem><simpara><ulink url="https://en.wikipedia.org/wiki/Bacula"/></simpara></listitem>
		</itemizedlist>
	</section>

</chapter>
