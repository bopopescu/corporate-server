<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % extensions SYSTEM "../stylesheets/macros.ent" >
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%extensions;
	%entities;
]>
<book lang="en" id="domain-4.4">
    <bookinfo>
      <title>Univention Corporate Server</title>
      <subtitle>Extended domain services documentation</subtitle>
    </bookinfo>

    <chapter id="ext-dom-ubuntu">
        <title>Integration of Ubuntu clients into a UCS domain</title>
        <para>
		  Univention Corporate Server allows the integration of Ubuntu clients. Initially a
		  standard Ubuntu installation needs to be performed. The following section describes the
		  configuration changes, which need to be made to integrate the Ubuntu client into the UCS
		  domain. After successful integration users can authenticate on the Ubuntu clients with
		  their standard UCS domain password and user name.
	</para>

        <para>
		  This configuration has been tested with Ubuntu 14.04 LTS, Ubuntu 16.04 LTS as well as Kubuntu 14.04 LTS.
	</para>

	<caution><para>
		  In case a command fails or does not return the expected output,
		  please make sure that all configuration options and files are entered and
		  have been written as shown in this document. For example, some text editors do not
  		  preserve the indentation which is required for some configuration files.
	</para></caution>

        <section id="ubuntu:integration">
            <title>Integration into the LDAP directory and the SSL certificate authority</title>
            <para>
			  After Ubuntu has been installed, some of it's configuration files need to be
			  modified. To simplify the setup, the default configuration of the UCS master domain
			  controller should be copied to the Ubuntu system, for example:
			</para>
			<programlisting language="sh"><![CDATA[
# Become root
sudo bash <<"EOF"

# Set the IP address of the UCS DC Master, 192.0.2.3 in this example
export MASTER_IP=192.0.2.3

mkdir /etc/univention
ssh -n root@${MASTER_IP} 'ucr shell | grep -v ^hostname=' >/etc/univention/ucr_master
echo "master_ip=${MASTER_IP}" >>/etc/univention/ucr_master
chmod 660 /etc/univention/ucr_master
. /etc/univention/ucr_master

echo "${MASTER_IP} ${ldap_master}" >>/etc/hosts

EOF
]]></programlisting>

            <para>
			  In the default configuration of UCS only authenticated users can search in the LDAP
			  directory. As such, the Ubuntu client needs an account in the UCS domain
			  to gain read access to the LDAP directory:
			</para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash <<"EOF"

. /etc/univention/ucr_master

# Download the SSL certificate
mkdir -p /etc/univention/ssl/ucsCA/
wget -O /etc/univention/ssl/ucsCA/CAcert.pem \
    http://${ldap_master}/ucs-root-ca.crt

# Create an account and save the password
password="$(tr -dc A-Za-z0-9_ </dev/urandom | head -c20)"
ssh -n root@${ldap_master} udm computers/ubuntu create \
    --position "cn=computers,${ldap_base}" \
    --set name=$(hostname) --set password="${password}" \
    --set operatingSystem="$(lsb_release -is)" \
    --set operatingSystemVersion="$(lsb_release -rs)"
printf '%s' "$password" >/etc/ldap.secret
chmod 0400 /etc/ldap.secret

# Create ldap.conf
cat >/etc/ldap/ldap.conf <<__EOF__
TLS_CACERT /etc/univention/ssl/ucsCA/CAcert.pem
URI ldap://$ldap_master:7389
BASE $ldap_base
__EOF__

EOF
]]></programlisting>
		</section>

        <section id="ubuntu:sssd">
            <title>Configuration of the System Security Services Daemon (SSSD)</title>
            <para>
			  SSSD provides a set of daemons to manage access to remote directories and
			  authentication mechanisms.
            </para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash <<"EOF"

. /etc/univention/ucr_master

# Install SSSD based configuration
DEBIAN_FRONTEND=noninteractive apt-get -y install sssd libnss-sss libpam-sss libsss-sudo

# Create sssd.conf
cat >/etc/sssd/sssd.conf <<__EOF__
[sssd]
config_file_version = 2
reconnection_retries = 3
sbus_timeout = 30
services = nss, pam, sudo
domains = $kerberos_realm

[nss]
reconnection_retries = 3

[pam]
reconnection_retries = 3

[domain/$kerberos_realm]
auth_provider = krb5
krb5_kdcip = ${master_ip}
krb5_realm = ${kerberos_realm}
krb5_server = ${ldap_master}
krb5_kpasswd = ${ldap_master}
id_provider = ldap
ldap_uri = ldap://${ldap_master}:7389
ldap_search_base = ${ldap_base}
ldap_tls_reqcert = never
ldap_tls_cacert = /etc/univention/ssl/ucsCA/CAcert.pem
cache_credentials = true
enumerate = true
ldap_default_bind_dn = cn=$(hostname),cn=computers,${ldap_base}
ldap_default_authtok_type = password
ldap_default_authtok = $(cat /etc/ldap.secret)
__EOF__
chmod 600 /etc/sssd/sssd.conf

# Install auth-client-config
DEBIAN_FRONTEND=noninteractive apt-get -y install auth-client-config

# Create an auth config profile for sssd
cat >/etc/auth-client-config/profile.d/sss <<__EOF__
[sss]
nss_passwd=   passwd:   compat sss
nss_group=    group:    compat sss
nss_shadow=   shadow:   compat
nss_netgroup= netgroup: nis

pam_auth=
        auth [success=3 default=ignore] pam_unix.so nullok_secure try_first_pass
        auth requisite pam_succeed_if.so uid >= 500 quiet
        auth [success=1 default=ignore] pam_sss.so use_first_pass
        auth requisite pam_deny.so
        auth required pam_permit.so

pam_account=
        account required pam_unix.so
        account sufficient pam_localuser.so
        account sufficient pam_succeed_if.so uid < 500 quiet
        account [default=bad success=ok user_unknown=ignore] pam_sss.so
        account required pam_permit.so

pam_password=
        password requisite pam_pwquality.so retry=3
        password sufficient pam_unix.so obscure sha512
        password sufficient pam_sss.so use_authtok
        password required pam_deny.so

pam_session=
        session required pam_mkhomedir.so skel=/etc/skel/ umask=0077
        session optional pam_keyinit.so revoke
        session required pam_limits.so
        session [success=1 default=ignore] pam_sss.so
        session required pam_unix.so
__EOF__
auth-client-config -a -p sss

# Restart sssd
service sssd restart

EOF
]]></programlisting>

			<para>
			  The commands <command>getent passwd</command> and <command>getent group</command>
			  should now also display all users and groups of the UCS domain.
			</para>
		</section>

        <section id="ubuntu:login">
            <title>Configuring user logins</title>
            <para>
			  The home directory of a user should be created automatically during login:
            </para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash <<"EOF"

cat >/usr/share/pam-configs/ucs_mkhomedir <<__EOF__
Name: activate mkhomedir
Default: yes
Priority: 900
Session-Type: Additional
Session:
    required    pam_mkhomedir.so umask=0022 skel=/etc/skel
__EOF__

DEBIAN_FRONTEND=noninteractive pam-auth-update --force

EOF
]]></programlisting>

            <para>
			  During login users should also be added to some system groups:
            </para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash <<"EOF"

echo '*;*;*;Al0000-2400;audio,cdrom,dialout,floppy,plugdev,adm' \
   >>/etc/security/group.conf

cat >>/usr/share/pam-configs/local_groups <<__EOF__
Name: activate /etc/security/group.conf
Default: yes
Priority: 900
Auth-Type: Primary
Auth:
    required    pam_group.so use_first_pass
__EOF__

DEBIAN_FRONTEND=noninteractive pam-auth-update --force

EOF
]]></programlisting>

            <para>
			  By default the Ubuntu login manager only displays a list of local users during
			  login. After adding the following lines an arbitrary user name can be used:
            </para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash <<"EOF"

# Add a field for a user name, disable user selection at the login screen
mkdir /etc/lightdm/lightdm.conf.d
cat >>/etc/lightdm/lightdm.conf.d/99-show-manual-userlogin.conf <<__EOF__
[SeatDefaults]
greeter-show-manual-login=true
greeter-hide-users=true
__EOF__

EOF
]]></programlisting>

            <para>
				Kubuntu 14.04 uses <systemitem class="service">AccountService</systemitem>, a D-Bus interface for user account management, which
			  ignores the <filename>/etc/lightdm.conf</filename> file.  Since there is no configuration
			  file for <systemitem class="service">AccountService</systemitem> the login theme needs to be changed to
			  <emphasis>classic</emphasis> under <guimenu>System Settings -> Login Screen (LightDM)</guimenu>.
			</para>

            <para>
			  With these settings the login for domain members should be possible after a restart of
			  LightDM or a reboot.
			</para>
		</section>

        <section id="ubuntu:kerberos">
            <title>Kerberos integration</title>
            <para>
			  Every UCS domain provides a Kerberos domain. Since Kerberos relies on DNS, the
			  Ubuntu client should use a UCS domain controller as its DNS server. The following
			  steps provide an example configuration for Kerberos:
            </para>
            <programlisting language="sh"><![CDATA[
# Become root
sudo bash <<"EOF"

. /etc/univention/ucr_master

# Install required packages
DEBIAN_FRONTEND=noninteractive apt-get install -y heimdal-clients ntpdate

# Default krb5.conf
cat >/etc/krb5.conf <<__EOF__
[libdefaults]
    default_realm = $kerberos_realm
    kdc_timesync = 1
    ccache_type = 4
    forwardable = true
    proxiable = true
    default_tkt_enctypes = arcfour-hmac-md5 des-cbc-md5 des3-hmac-sha1 des-cbc-crc des-cbc-md4 des3-cbc-sha1 aes128-cts-hmac-sha1-96 aes256-cts-hmac-sha1-96
    permitted_enctypes = des3-hmac-sha1 des-cbc-crc des-cbc-md4 des-cbc-md5 des3-cbc-sha1 arcfour-hmac-md5 aes128-cts-hmac-sha1-96 aes256-cts-hmac-sha1-96
    allow_weak_crypto=true

[realms]
$kerberos_realm = {
   kdc = $master_ip $ldap_master
   admin_server = $master_ip $ldap_master
   kpasswd_server = $master_ip $ldap_master
}
__EOF__

# Synchronize the time with the UCS system
ntpdate -bu $ldap_master

# Test Kerberos: kinit will ask you for a ticket and the SSH login to the master should work with ticket authentication:
kinit Administrator
ssh -n Administrator@$ldap_master ls /etc/univention

# Destroy the kerberos ticket
kdestroy

EOF
]]></programlisting>
		</section>

        <section id="ubuntu:limits">
            <title>Limitations of the Ubuntu domain integration</title>
            <para>
			  It is currently not possible to change the user password at the LightDM login
			  manager. Instead, the password can be changed via the <command>kpasswd</command>
			  command after login or via the UMC module <guimenu>Change password</guimenu>.
			</para>
		</section>

        <section id="ubuntu:ref">
            <title>Additional references</title>
			  <itemizedlist>
				<listitem><para><ulink url="https://help.ubuntu.com/community/LDAPClientAuthentication"/></para></listitem>
				<listitem><para><ulink url="https://help.ubuntu.com/community/SingleSignOn"/></para></listitem>
				<listitem><para><ulink url="https://help.ubuntu.com/community/PamCcredsHowto"/></para></listitem>
				<listitem><para><ulink url="http://labs.opinsys.com/blog/2010/03/26/user-management-with-sssd-on-shared-laptops/"/></para></listitem>
			  </itemizedlist>
		</section>
	</chapter>

    <chapter id="ext-dom-unix">
        <title>Integration of Linux/Unix systems into a UCS domain</title>
        <para>
		  These are general instructions for the integration of Unix/Linux-based non-UCS
		  systems - referred to in the following simply as Unix systems - in the trust context
		  of the UCS domain.
		</para>

        <para>
		  The integration of Ubuntu clients is documented with example step-by-step instructions in
		  <xref linkend="ext-dom-ubuntu"/>.
		</para>

        <para>
		  The integration of Mac OS X clients is documented with example step-by-step instructions
		  in the UCS manual. Mac OS systems use a deviating domain integration based
		  on Samba 4.
		</para>

		<para>
		  Not all integration steps need to be performed. In this way, for example, a Unix system
		  can merely be integrated in the IP management and access the NTP server without integrating
		  the system in the UCS user management (e.g., if it is a database server on which no user
		  login is performed anyway).
		</para>

        <section id="unix:umc">
		  <title>Managing the systems in the &ucsUMC;</title>
		  <para>
			A <guimenu>Computer: Linux</guimenu> object can be created in the UMC computer
			management. This allows the integration of the Unix system in the DNS/DHCP and network
			administration of the &ucsUMC;
		  </para>

		  <para>
			If the Nagios support is enabled under <guimenu>[Options]</guimenu>, remote Nagios checks can
			also be applied against the system.
		  </para>
		</section>

        <section id="ext-dom-time">
		  <title>Configuration of the name resolution</title>
		  <para>
			The Unix system should use a name server from the UCS domain: All UCS domain controllers
			(i.e., &ucsMaster;, &ucsBackup; and &ucsSlave;) operate a DNS server. One or more of
			these UCS system should be entered in the <filename>/etc/resolv.conf</filename>, e.g.:
		  </para>
<programlisting>
domain  example.com
nameserver  192.0.2.08
nameserver  192.0.2.9
</programlisting>
		</section>

        <section id="unix:time">
		  <title>Configuration of the time server</title>
		  <para>
			All UCS domain controllers (i.e., &ucsMaster;, &ucsBackup; and &ucsSlave;) operate a NTP
			server.
		  </para>

		  <para>
			The configuration differs depending on the NTP software used, but is set under
			<filename>/etc/ntp.conf</filename> on most Linux systems, e.g.:
		  </para>
<programlisting>
server master.example.com
server backup.example.com
</programlisting>
		</section>

		<section id="unix:domain">
		  <title>Access to user and group information of the UCS domain</title>
		  <para>
			The <emphasis>Name Service Switch</emphasis> (NSS) is an interface for configuring the
			data sources for users, groups and computers. NSS is present on all Linux versions and
			most Unix systems.
		  </para>

		  <para>
			If the Unix system used provides support for an NSS module for LDAP access - as is the
			case in most Linux distributions - user and group information can be read out of the
			UCS LDAP directory.
		  </para>

		  <para>
			The configuration files of the NSS LDAP module differ depending on the Linux/Unix
			version.
		  </para>

		  <para>
			As a general rule, the following settings must be set there:
		  </para>

			<itemizedlist>
			  <listitem><simpara>
				The DN of the LDAP base of the UCS domain (saved in the &ucsUCRV;
				<envar>ldap/base</envar> on UCS servers) needs to be configured on the system.
			  </simpara></listitem>

			  <listitem><simpara>
				The LDAP server, ports and authentication credentials to be used. The fully
				qualified domain names of one or more UCS domain controllers should be entered
				here. In the default setting, UCS LDAP servers only allow authenticated LDAP access.
			  </simpara></listitem>

			  <listitem><para>
				In the standard setting, only TLS-secured access is possible on UCS-LDAP
				servers. The accessing Unix system must therefore use the root certificate of the
				UCS-CA. The certificate can be found on the &ucsMaster; in the file
				<filename>/etc/univention/ssl/ucsCA/CAcert.pem</filename> and can be copied into any
				directory, e.g., <filename>/etc/ucs-ssl/</filename>. The UCS root certificate must
				then be configured in the LDAP configuration files. If the Unix system uses OpenLDAP
				as the LDAP implementation, it is usually the file
				<filename>/etc/openldap/ldap.conf</filename> or
				<filename>/etc/ldap/ldap.conf</filename>. The line for OpenLDAP is as follows:
			  </para>
<programlisting>
TLS_CACERT /etc/ucs-ssl/CAcert.pem
</programlisting>
			  </listitem>
			</itemizedlist>

		  <para>
			If the NSS LDAP service has been set up correctly, the following two commands should
			output all users and groups:
		  </para>
<programlisting language="sh">
getent passwd
getent group
</programlisting>
		</section>

		<section id="unix:kerberos">
		  <title>Integrating into Kerberos</title>
		  <para>
			UCS employs the Kerberos implementation Heimdal. For this reason, Heimdal should also be
			used to access the Kerberos realm on the Unix system. Only the Heimdal client libraries
			need to be installed on the Unix system.
		  </para>

		  <para>
			Kerberos requires correct time synchronization, see <xref linkend="ext-dom-time"/>.
		  </para>

		  <para>
			The configuration is performed in the <filename>/etc/krb5.conf</filename> file on most
			systems. Here is an example configuration:

			<itemizedlist>
			  <listitem><simpara>
					  <replaceable>KERBEROSREALM</replaceable> must be replaced by the name of the UCS Kerberos realm (saved in the
				&ucsUCRV; <envar>kerberos/realm</envar>).
			  </simpara></listitem>

			  <listitem><simpara>
					  <replaceable>MASTERIP</replaceable> must be replaced by the IP address of the &ucsMaster;.
			  </simpara></listitem>

			  <listitem><simpara>
					  <replaceable>MASTERFQDN</replaceable> must be replaced by the fully qualified domain name of the &ucsMaster;.
			  </simpara></listitem>
			</itemizedlist>

<programlisting>
[libdefaults]
    default_realm = KERBEROSREALM
    default_tkt_enctypes = arcfour-hmac-md5 des-cbc-md5 des3-hmac-sha1 \
       des-cbc-crc des-cbc-md4 des3-cbc-sha1 aes128-cts-hmac-sha1-96   \
       aes256-cts-hmac-sha1-96
    permitted_enctypes = des3-hmac-sha1 des-cbc-crc des-cbc-md4 \
       des-cbc-md5 des3-cbc-sha1 arcfour-hmac-md5               \
       aes128-cts-hmac-sha1-96 aes256-cts-hmac-sha1-96
    allow_weak_crypto=true
    kdc_timesync = 1
    ccache_type = 4
    forwardable = true
    proxiable = true

[realms]
KERBEROSREALM = {
   kdc = MASTERIP MASTERFQDN
   admin_server = MASTERIP MASTERFQDN
   kpasswd_server = MASTERIP MASTERFQDN
}
</programlisting>
		  </para>

		  <para>
			The Heimdal PAM module then needs to be installed. In general, the installation of the
			module should adapt the PAM configuration automatically.
		  </para>

		  <para>
			Then Kerberos authentication during login should work via PAM  and password
			changes should be possible via <command>kpasswd</command>.
		  </para>

		  <para>
			To allow SSH logins via Kerberos, the options <option>GSSAPIAuthentication</option>
			and <option>GSSAPIKeyExchange</option> should be set to <literal>yes</literal> in
			the configuration file of the SSH daemon (typically <filename>/etc/ssh/sshd_config</filename>).
		  </para>

		</section>

		<section id="unix:print">
		  <title>Accessing a UCS print server</title>
		  <para>
			UCS uses the <emphasis>Common Unix Printing System</emphasis> (CUPS) to implement print
			services. The Unix system can use the UCS print servers by installing the CUPS client
			programs. In addition the CUPS server needs to be configured for the clients, typically in the
			configuration file <filename>/etc/cups/client.conf</filename>, e.g.:
		  </para>
<programlisting>
ServerName printserver.example.com
</programlisting>
		</section>
	</chapter>

    <chapter id="extdom:ssl">
	  <title>Advanced SSL certificate handling</title>

	  <section id="extdom:ssl:manage">
		<title>Managing additional certificates with <command>univention-certificate</command></title>
        <para>
		  Every UCS domain has its own SSL certificate authority. The SSL certificates are created
		  automatically for all UCS systems during the installation (&ucsMaster;) or during the domain join
		  (all other system roles).
		</para>

        <para>
		  The command <command>univention-certificate</command> can be used to manage these
		  certificates, e.g., if it proves necessary to create a certificate for the integration of
		  an external system. The command is executed as <systemitem class="username">root</systemitem> on the &ucsMaster;.
		</para>

        <section id="extdom:ssl:storage">
            <title>Storage of the certificates</title>
			<para>
			  The certificates are stored in the directory <filename class="directory">/etc/univention/ssl/</filename>
			  on the &ucsMaster; and synchronized on all &ucsBackup; systems. A subdirectory with
			  the name of the certificate is kept in the directory <filename class="directory">/etc/univention/ssl/</filename>
			  for every certificate, which contains the following files:
			</para>

			<variablelist>
				<varlistentry>
					<term><filename>req.pem</filename></term>
					<listitem>
						<simpara>
							This file contains the original request with which the certificate was created.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>openssl.cnf</filename></term>
					<listitem>
						<simpara>
							This file contains the OpenSSL configuration at the time the certificate was created.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>cert.pem</filename></term>
					<listitem>
						<simpara>
							The file represents the actual certificate.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>private.key</filename></term>
					<listitem>
						<simpara>
							The file contains the private key for the certificate.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

        <section id="extdom:ssl:list">
            <title>Displaying the certificates</title>
			<para>
			  The following command is used to display a list of all the available, valid certificates:
			</para>
<programlisting language="sh"><![CDATA[
univention-certificate list
]]></programlisting>

			<para>
			  An individual SSL certificate can be displayed with the following command:
			</para>
<programlisting language="sh"><![CDATA[
univention-certificate dump -name fullyqualifiedhostname
]]></programlisting>
		</section>

        <section id="extdom:ssl:valid">
            <title>Checking the validity of a certificate</title>
			<para>
			  This command checks whether a certificate is valid or invalid:
			</para>
<programlisting language="sh"><![CDATA[
univention-certificate check -name fullyqualifiedhostname
]]></programlisting>
			<para>
			  A certificate may be invalid because it has either been revoked or has expired.
			</para>
		</section>

        <section id="extdom:ssl:revoke">
            <title>Revoking a certificate</title>
			<para>
			  The following command is used to revoke a certificate:
			</para>
<programlisting language="sh"><![CDATA[
univention-certificate revoke -name fullyqualifiedhostname
]]></programlisting>
			<para>
				It is then no longer valid, but remains stored in the file system.
				Certificates of UMC computer objects do not need to be revoked manually.
			</para>
		</section>

        <section id="extdom:ssl:create">
            <title>Creating a certificate</title>
			<para>
			  The following command can be used to create a new certificate:
			</para>
<programlisting language="sh"><![CDATA[
univention-certificate new -name fullyqualifiedhostname
]]></programlisting>
			<para>
			  The fully qualified domain name of the
			  computer should be given as the name. In the default setting the certificate is valid
			  for five years. The standard value can be changed by setting the &ucsUCRV;
			  <envar>ssl/default/days</envar>.
			</para>
		</section>
	  </section>

	  <section id="extdom:ssl:sign">
		<title>Signing of certificate signing requests by the UCS certificate authority</title>
        <para>
		  A certificate signing request (CSR) is a request submitted to a certificate authority (CA)
		  to create a digital signature. A CSR typically occurs in the form of a file. This section
		  describes how a CSR is signed by the UCS CA.
		</para>

        <para>
		  CERTIFICATE is the file name of the certificate to be created.
		</para>

        <para>
			REQUEST is the file with the CSR in either PEM or DER format.
			A file in PEM format is a text file containing a base64 encoded block enclosed between <literal>BEGIN CERTIFICATE</literal> and <literal>END CERTIFICATE</literal>.
			A request in binary DER format must be first converted to the PEM format with the following command:
		</para>
<programlisting language="sh">
openssl req \
  -inform  der -in  request.der \
  -outform pem -out req.pem
</programlisting>

        <para>
		  The following command then processes the CSR and creates the certificate:
		</para>
<programlisting language="sh">
openssl ca -batch -config /etc/univention/ssl/openssl.cnf \
  -in REQUEST -out CERTIFICATE \
  -passin file:/etc/univention/ssl/password
</programlisting>
	  </section>

	</chapter>


    <chapter id="ext-dom-syncrepl">
	  <title>Connecting an external OpenLDAP server via syncrepl</title>

	  <section id="syncrepl:intro">
	  	<title>Introduction</title>

	  	<para>
		  This chapter describes the read-only integration of an external OpenLDAP server via a
		  syncrepl proxy. This allows the external system to access the LDAP data of the UCS domain
		  without being a member of the domain itself. This guide principally applies to any Unix
		  system with OpenLDAP. The guide has been tested with Debian 7 Wheezy. Syncrepl is part of
		  OpenLDAP starting with version 2.2.
	  	</para>

	  	<para>
		  The external OpenLDAP server is described as <systemitem class="fqdomainname">extldap.univention.test</systemitem>
		  below and synchronizes with the &ucsMaster;, which uses the LDAP base
		  <uri>dc=univention,dc=test</uri>.
	  	</para>

	  	<para>
		  The following steps must be run on the OpenLDAP system and the UCS system as the
		  <systemitem class="username">root</systemitem> user:
	  	</para>
	  </section>

	  <section id="syncrepl:account">
	  	<title>Creating a computer account</title>
	  	<para>
		  For <systemitem class="fqdomainname">extldap.univention.test</systemitem>, a <emphasis>Linux</emphasis>
		  computer object must be created in the &ucsUMC; computer management and
		  a DNS forward and reverse zone assigned to the computer.
	  	</para>

	  </section>

	  <section id="syncrepl:master">
		<title>Activation of syncrepl on the master domain controller</title>
		<!-- Can be trimmed drastically once 33709 is fixed -->
		<para>
		  Now a syncrepl proxy needs to be set up on the &ucsMaster;. The required configuration
		  files are downloaded from
		  <ulink url="https://updates.software-univention.de/download/syncrepl/ucs4-syncrepl-proxy-setup.tar.bz2"/> as
		  a Tar archive.
		</para>

		<para>
		  The downloaded archive must firstly be extracted on the &ucsMaster;:
		  <programlisting language="sh">
tar -xvf ucs4-syncrepl-proxy-setup.tar.bz2
		  </programlisting>
		</para>

		<para>
		  The <filename>UCS_dc_master</filename> subdirectory contains two &ucsUCR; subfile
		  templates for the LDAP server configuration file
		  (<filename>/etc/ldap/slapd.conf</filename>). Subfiles are a mechanism in &ucsUCR; which
		  can be used to generate a configuration file from several individual templates. More
		  detailed information can be found in the UCS manual. The two subfiles are now copied into
		  the template directory:

		  <programlisting language="sh">
mv UCS_dc_master/8*.conf /etc/univention/templates/files/etc/ldap/slapd.conf.d/
mv UCS_dc_master/syncrepl-proxy.conf /etc/univention/templates/files/etc/ldap/
		  </programlisting>
		</para>

		<para>
		  The info file now needs to be copied. It registers the subfile templates and the &ucsUCR;
		  variables used:

		  <programlisting language="sh">
mv UCS_dc_master/syncrepl-proxy.info /etc/univention/templates/info/
		  </programlisting>

		  Then the <filename>slapd.conf</filename> is regenerated from the template:

		  <programlisting language="sh">
ucr commit /etc/ldap/slapd.conf
ucr commit /etc/ldap/syncrepl-proxy.conf
		  </programlisting>
		</para>
	  </section>

	  <section id="syncrepl:init">
		<title>Initial transfer of the LDAP data</title>

		<para>
		  Now an initial copy of the UCS data is created and transferred to the external system. In
		  addition, an initial configuration file for the OpenLDAP service is copied onto the
		  external system (<filename>slapd.conf</filename>).

		  <programlisting language="sh">
slapcat > data.ldif
cat remote_system/template-slapd.conf | ucr filter > remote_system/slapd.conf
scp remote_system/slapd.conf data.ldif extldap.univention.test:
rm data.ldif
		  </programlisting>
		</para>

		<para>
		  The LDAP schema data and the SSL certificates from the UCS master are now passed to the
		  external LDAP server:

		  <programlisting language="sh">
rsync -aR /usr/share/univention-ldap/schema extldap.univention.test:/
rsync -aR /var/lib/univention-ldap/local-schema extldap.univention.test:/
rsync -aR /etc/univention/ssl/extldap.univention.test extldap.univention.test:/
rsync -aR /etc/univention/ssl/ucsCA/CAcert.pem extldap.univention.test:/
		  </programlisting>
		</para>
	  </section>

	  <section id="syncrepl:3rd">
		<title>Configuration of the LDAP service on the third-party system</title>
		<para>
		  The configuration of the external LDAP server is now adapted. It must be noted that only a
		  minimal <filename>slapd.conf</filename> is installed here, which should be expanded with
		  local adaptations as necessary:

		  <programlisting language="sh">
/etc/init.d/slapd stop
cp /etc/ldap/slapd.conf /root/backup-slapd.conf
cp /root/slapd.conf /etc/ldap
		  </programlisting>
		</para>

		<para>
		  A number of settings now need to be adapted in the provided
		  <filename>/etc/ldap/slapd.conf</filename> template:

		  <itemizedlist>
			<listitem><simpara>
			  <systemitem class="fqdomainname">extldap.univention.test</systemitem> must be replaced with the fully qualified
			  domain name of the external LDAP server
			</simpara></listitem>

			<listitem><simpara>
			  <uri>dc=univention,dc=test</uri> must be replaced with the LDAP base
			  actually used
			</simpara></listitem>

			<listitem><simpara>
			  <replaceable>REMOTE_UPDATE_PASSWORD</replaceable> must be replaced with the password used to
			  access the LDAP database
			</simpara></listitem>
		  </itemizedlist>
		</para>
	  </section>

	  <section id="syncrepl:init2">
		<title>Importing the initial LDAP copy</title>
		<para>
		  The initial copy of the UCS directory data is now imported and the LDAP server
		  restarted. The file permissions of the <filename>/var/lib/ldap/</filename> directory and
		  the <filename>/etc/ldap/slapd.conf</filename> file differ depending on the Linux/Unix
		  version:

		  <programlisting language="sh">
mkdir /root/ldap_backup_dir
mv /var/lib/ldap/*.* /root/ldap_backup_dir
slapadd -f /etc/ldap/slapd.conf -l /root/data.ldif
chown openldap.openldap /var/lib/ldap/*.*
chgrp openldap /etc/ldap/slapd.conf
chgrp -R openldap /etc/univention/ssl
/etc/init.d/slapd start
		  </programlisting>
		</para>

		<para>
		  The configuration of the external LDAP server is now complete. The following command
		  (performed on the &ucsMaster;) can be used to check whether the external LDAP server can
		  be reached via the <systemitem class="protocol">LDAPS</systemitem> protocol:

		  <programlisting language="sh">
ldapsearch -x -H ldaps://extldap.univention.test -b cn=Subschema -s base
		  </programlisting>
		</para>

		<para>
		  Whenever schema files are added on the UCS Master, the following steps
		  have to be repeated.
		  First an updated <filename>slapd.conf</filename> needs to be generated for the remote LDAP server
		  which includes all UCS schema files. Then all required files need to be copied to the
		  remote LDAP server:
		  <programlisting language="sh">
cat remote_system/template-slapd.conf | ucr filter > remote_system/slapd.conf
scp remote_system/slapd.conf extldap.univention.test:
rsync -aR /usr/share/univention-ldap/schema extldap.univention.test:/
rsync -aR /var/lib/univention-ldap/local-schema extldap.univention.test:/
		  </programlisting>
		  And after that the following steps need to be repeated on the external LDAP server:
		  <programlisting language="sh">
/etc/init.d/slapd stop
cp /etc/ldap/slapd.conf /root/backup-slapd.conf
cp /root/slapd.conf /etc/ldap
chgrp openldap /etc/ldap/slapd.conf
/etc/init.d/slapd start
		  </programlisting>
		</para>

		<para>
			If the external system is a Debian system, the '<varname>SLAPD_SERVICES</varname>' variable may need to be
			adapted in <filename>/etc/default/slapd</filename>. In addition, the '<varname>SLAPD_CONF</varname>' variable can be used to
			specify the <filename>/etc/ldap/slapd.conf</filename> file as the configuration file for the <systemitem class="daemon">slapd</systemitem>, if this
		  is not the standard for the OpenLDAP version used.
		</para>
	  </section>

	  <section id="syncrepl:proxy">
		<title>Activation of the syncrepl proxy</title>
		<para>
		  If the LDAP connection works, the configuration of the syncrepl proxy can be
		  activated on the &ucsMaster;. This is done by saving the '<replaceable>REMOTE_UPDATE_PASSWORD</replaceable>' password
		  configured above in the <filename>/etc/replica-001.secret</filename> file and entering the
		  address of the external LDAP server in the form of a LDAP-URI in the &ucsUCRV;
		  <envar>ldap/replica/target/uri</envar>:

		  <programlisting language="sh">
echo -n 'REMOTE_UPDATE_PASSWORD' >  /etc/replica-001.secret
chmod 600 /etc/replica-001.secret
univention-config-registry set ldap/replica/target/uri='ldaps://extldap.univention.test/'
ucr commit /etc/ldap/syncrepl-proxy.conf
/etc/init.d/slapd restart
		  </programlisting>
		</para>

		<para>
		  If several systems are connected, the corresponding LDAP-URIs can be entered in the
		  variable separated with commas and additional replica password files created. The number
		  in the name of the password files is incremented by one for each additional system.
		</para>

		<para>
			The replication originates from the &ucsMaster; and is performed via <systemitem class="protocol">LDAPS</systemitem> to the host
		  name of the external LDAP server system. This requires working name resolution (typically via
		  DNS). The host name must be specified as a fully qualified domain name to allow checking
		  of the SSL certificate.
		</para>

		<para>
		  To allow convenient LDAP search via <command>ldapsearch -x expression</command> on the external LDAP server
		  the file <filename>/etc/ldap/ldap.conf</filename> may be configured like this:
		  <programlisting language="sh">
TLS_CACERT /etc/univention/ssl/ucsCA/CAcert.pem
HOST FQDN
BASE LDAPBASE
		  </programlisting>
		</para>
	  </section>

	  <section id="syncrepl:test">
		<title>Testing the replication</title>
		<para>
		  The replication via syncrepl can be tested by changing the description of an existing user
		  for example. When an LDAP search is performed on the external server, the changed
		  description should then be displayed.
		</para>
	  </section>
	</chapter>
</book>
