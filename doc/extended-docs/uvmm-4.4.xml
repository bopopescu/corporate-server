<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
	<!ENTITY % extensions SYSTEM "../stylesheets/macros.ent" >
	<!ENTITY % entities SYSTEM "../stylesheets/macros-en.ent" >
	%extensions;
	%entities;
]>
<book lang="en" id="uvmm-4.4">
	<bookinfo>
		<title>Univention Corporate Server</title>
		<subtitle>Extended virtualization documentation</subtitle>
	</bookinfo>

	<chapter id="uvmmext:iscsi">
		<title>Operating storage pools using iSCSI</title>
		<para>
			iSCSI is a standard for connecting SCSI storage devices via a TCP-based network
			connection. iSCSI makes it possible to use a wide range of professional storage solutions
			for the storage of virtual machines. This documentation describes the connection of an iSCSI
			storage device (also known as a <emphasis>target</emphasis>) as a storage pool for the
			&ucsUVMM;.
		</para>

		<section id="uvmmext:iscsi:precon">
			<title>Requirements</title>
			<para>
				<itemizedlist>
					<listitem><simpara>
							The <package>open-iscsi</package> package must be installed on the virtualization
							servers.
					</simpara></listitem>

					<listitem><simpara>
							The iSCSI storage device must be configured in such a way that the virtualization
							servers can access it: The servers use the name stored in the
							<filename>/etc/iscsi/initiatorname.iscsi</filename> file as the initiator name. The
							name may still need to be generated automatically, which can be done by running
							<command>/etc/init.d/open-iscsi restart</command> once.
					</simpara></listitem>

					<listitem><simpara>
							The libvirt interface used by UVMM does not currently support any authentication. If
							CHAP is used, the <filename>/etc/iscsi/iscsid.conf</filename> file must be
							adjusted by hand.
					</simpara></listitem>
				</itemizedlist>
			</para>
		</section>

		<section id="uvmmext:iscsi:integration">
			<title>Integration of iSCSI storage pools</title>
			<para>
				UVMM does not yet support the creation of storage pools via the UMC. The creation of
				storage pools is described below.
			</para>

			<para>
				To make an additional storage pool available on a virtualization server, it is necessary
				to create an XML file with a description. The creation of storage pools is documented in
				the virtualization chapter of the UCS manual. Below, a storage pool is defined which
				accesses an iSCSI storage device.
			</para>

			<para>
				<itemizedlist>
					<listitem><simpara>
							The <property>type</property> attribute must be set to the <literal>iscsi</literal>
							value in the <emphasis>pool</emphasis> element.
					</simpara></listitem>

					<listitem><simpara>
							A <property>source</property> element is used to specify the source servers (iSCSI
							target).
					</simpara></listitem>

					<listitem><simpara>
							The <property>target</property> element is used to define the path to the device
							files. The <filename class="directory">/dev/disk/by-path</filename> should be used there for stable
							names.
					</simpara></listitem>
				</itemizedlist>
			</para>

			<para>
				In the following example, a storage pool is defined, which mounts the
				<systemitem class="resource">iqn.2010-08.local.ucs:sdb</systemitem> iSCSI target from the
				<systemitem class="server">xen6.ucs.local</systemitem> server:

				<programlisting language="xml"><![CDATA[
<pool type='iscsi'>
	<name>iscsi</name>
	<source>
		<host name='xen6.ucs.local' port='3260'/>
		<device path='iqn.2010-08.local.ucs:sdb'/>
	</source>
	<target>
		<path>/dev/disk/by-path</path>
	</target>
</pool>
					]]></programlisting>
			</para>

			<para>
				This description must firstly be saved in a file (for example, in the
				<filename>iscsi-pool.xml</filename> file). For it to be possible to use this storage pool,
				the following commands must be run:

				<programlisting language="sh">
virsh pool-define iscsi-pool.xml
virsh pool-start iscsi
virsh pool-autostart iscsi
				</programlisting>

				The UVMM service will detect the new storage pool automatically after a certain period of
				time. Alternatively, the service can also be restarted once so that this new storage pool
				information is detected immediately:

				<programlisting language="sh">
/etc/init.d/univention-virtual-machine-manager-daemon restart
				</programlisting>
			</para>
		</section>

		<section id="uvmmext:iscsi:use">
			<title>Use of iSCSI storage pools</title>
			<para>
				Hard disks in UVMM can then be used from the storage pool. When doing so, ensure that no
				new images are saved in an iSCSI storage pool and only existing ones are selected. The
				individual LUNs are offered as possible images.
			</para>

			<para>
				If new iSCSI LUNs are set up, the iSCSI storage pool must still be re-imported manually at
				present. This can be done using the following command:

				<programlisting language="sh">
virsh pool-refresh "$pool_name"
				</programlisting>

				For the example above:

				<programlisting language="sh">
virsh pool-refresh iscsi
				</programlisting>
			</para>
		</section>
	</chapter>

	<chapter id="uvmmext:xen">
		<title>Xen deprecated in UCS-4</title>
		<para>
			For UCS-4.0 Univention decided to drop support for the <application>Xen</application> hypervisor in favor of <application>QEMU/KVM</application>.
			UCS-4 no longer contains the package <package>xen-4.1</package> as previously provided by Univention, but only the package <package>xen</package> as maintained by Debian.
		</para>
		<para>
			Managing Xen virtual machines in no longer possible using &ucsUVMM; from UCS-4.
			Customers using <application>Xen</application> can continue using existing UCS-3 virtualization servers with UVMM from UCS-3 by not updating them, but should consider one of the following options long-term:
		</para>
		<itemizedlist>
			<listitem><simpara>switch to the hypervisor <application>QEMU/KVM</application>, which requires updating all virtual machines.</simpara></listitem>
			<listitem><simpara>switch to the Debian based <application>Xen</application>.</simpara></listitem>
		</itemizedlist>
		<para>
			Univention recommends to switch to <application>KVM</application>.
		</para>

		<section id="uvmmext:xen:qemu">
			<title>Switch to QEMU/KVM</title>
			<para>
				When switching from <application>Xen</application> to <application>KVM</application> the drivers for para-virtual block and network devices must be changed.
				This switch is easier for Linux based virtual machines, as the Linux kernel already contains drivers for both hypervisors and automatically uses the right one.
				For Microsoft Windows bases systems the GPLPV drivers must be un-installed completely, before the replacement drivers VirtIO for <application>KVM</application> can be installed.
			</para>
			<para>
				Univention recommends to setup a new virtualization server using <application>KVM</application> and to copy over the exiting image files to the new server.
				This has the advantage that the new setup can be tested thoroughly and a fallback to the old hypervisor using <application>Xen</application> is possible.
			</para>
			<procedure id="uvmm:xen2kvm">
				<title>Convert virtual machines from Xen to KVM</title>
				<step performance="optional">
					<para>
						Backup all disk images of the virtual machine.
							The exact file path can be queried from &ucsUVMM; or by running the command <command>virsh domblklist "$vm"</command>, where <envar>$vm</envar> is the name or UUID of one virtual machine.
					</para>
				</step>
				<step>
					<para>
						Create a backup of the XML definition of the virtual machine using the command <command>virsh dumpxml --inactive "$vm" &gt;"$vm.xml"</command>.
					</para>
				</step>
				<step>
					<para>
						Prepare the virtual machine for migration by performing the following actions inside the running virtual machine:
					</para>
					<stepalternatives>
						<step>
							<para>
								For a Linux based virtual machine perform the following steps:
							</para>
							<substeps>
								<step>
									<para>
										Convert any reference to <application>Xen</application> specific block devices like <filename>/dev/xvd<replaceable>a1</replaceable></filename> in <filename>/etc/fstab</filename>.
										Use a device name independent format like <filename>LABEL=</filename> or <filename>UUID=</filename> as this is the most reliable format.
										The use of fixed names like <filename>/dev/vd<replaceable>a1</replaceable></filename> should be avoided as the order of the devices might change between reboots.
									</para>
									<para>
										The device name for CD-ROMs with <application>QEMU/KVM</application> is <filename>/dev/sr<replaceable>0</replaceable></filename> or <filename>/dev/vd<replaceable>b</replaceable></filename>, depending on the exact setup of the virtual machine.
									</para>
								</step>
								<step>
									<para>
										Make sure <application>GRUB</application> is installed in the directory <filename class="directory">/boot/</filename> and in the master boot record (<abbrev>MBR</abbrev>) of the first hard disk.
										You can use commands like <command>fdisk /dev/xvd<replaceable>a</replaceable></command> for <abbrev>MBR</abbrev> or <command>gdisk /dev/xdv<replaceable>a</replaceable></command> for <abbrev>GPT</abbrev> based disks to check the partition layout.
										Use <command>grub-install /dev/xdv<replaceable>a</replaceable></command> to install the boot loader into the <abbrev>MBR</abbrev>.
									</para>
								</step>
								<step>
									<para>
										Run <command>update-grub</command> to create an up-to-date file <filename>/boot/grub/grub.cfg</filename>.
										Check that file for any <application>Xen</application> specific device names.
										Modify the file using your preferred editor and change them to the <application>QEMU/KVM</application> equivalent names as described in the first step.
									</para>
								</step>
								<step>
									<para>
										Check the file <filename>/etc/inittab</filename> for any <application>getty</application> running on <filename class="devicefile">hvc0</filename> or any other <application>Xen</application> specific console.
										Either remove those lines or convert them to a traditional serial console <filename class="devicefile">ttyS0</filename>, which is supported by <application>QEMU/KVM</application>.
									</para>
								</step>
								<step>
									<para>
										Check all &ucsUCRV;s still referencing <application>Xen</application> specific devices and convert them to the appropriate equivalent:
									</para>
										<programlisting language="sh">
ucr search --value '^(/dev/)?xvd[a-z]+[0-9]*$'
										</programlisting>
								</step>
								<step>
									<para>
										Check the &ucsUCRV; <envar>kernel/modules</envar> for any <application>Xen</application> specific modules and remove them.
										The variable is a list of semicolon separated values.
									</para>
								</step>
							</substeps>
						</step>
						<step>
							<para>
								For Windows the <emphasis>GPLPV drivers for Xen</emphasis> must be removed completely, otherwise Windows will crash.
								The procedure is described in the <ulink url="https://wiki.univention.de/index.php?title=Installing-signed-GPLPV-drivers">Univention Wiki: Installing signed GPLPV drivers</ulink>.
							</para>
							<para>
								After a reboot the new <emphasis>VirtIO drivers for QEMU/KVM</emphasis> can be installed.
								They are provided by the package <package>univention-kvm-virtio</package> and are available as an ISO image in <filename>/var/lib/libvirt/images/</filename>.
								The exact procedure differs between Windows versions and is beyond the scope of this documentation.
								See the virtualization chapter in the <biblioref linkend="ucs-manual"/> for further details.
							</para>
						</step>
					</stepalternatives>
				</step>
				<step>
					<para>
						Shut down the virtual machine cleanly.
						Suspending the machine is not enough!
					</para>
				</step>
				<step performance="optional">
					<para>
						The image format for storing the virtual machine data can be changed optionally:
						Xen only supports <quote>raw</quote> images, while QEMU/KVM supports more advanced formats like <quote>qcow2</quote>, which supports snapshots.
						If you plan to use those features, the conversion can be done using a command like <command>qemu-img convert -f raw -O qcow2 <replaceable>input</replaceable>.raw <replaceable>output</replaceable>.qcow2</command>.
					</para>
					<para>
						Remember to change the format from <quote>raw</quote> to <quote>qcow2</quote> in the domain definition later on.
					</para>
				</step>
			</procedure>
			<para>
				After this the virtual machine can be migrated to <application>KVM</application>.
				There are two alternatives:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The recommended upgrade path is to setup a <emphasis>new server</emphasis> using <application>KVM</application>.
						This has the advantage that the old server is still available if anything goes wrong or the migration is aborted.
					</para>
					<para>
						If you are using a shared storage, make sure that you have backups of all files and that you are using the correct images.
						If you don't have a shared storage, copy the image file to the new server into <filename class="directory">/var/lib/libvirt/images/</filename> or any other storage pool you might have configured.
					</para>
				</listitem>
				<listitem>
					<para>
						Otherwise the virtualization server must be upgraded <emphasis>in-place</emphasis>.
					</para>
					<warning>
						<para>
							This is a one-way upgrade path.
							If anything goes wrong, the server has to be restored from backup and must be re-joined!
						</para>
					</warning>
					<procedure id="uvmm:xen2kvm:inplace">
						<title>Migrate server from Xen to KVM in-place</title>
						<step>
							<para>Shut down all virtual machines running on this server.</para>
						</step>
						<step>
							<para>
								Uninstall the App <quote>Xen virtualization server</quote>.
							</para>
						</step>
						<step>
							<para>
								Run the <emphasis>un-join scripts</emphasis>:
								Go to the &ucsUMC; and open the <emphasis>Join</emphasis> module.
								Click the button to run all pending join scripts.
							</para>
						</step>
						<step>
							<para>
								Perform the update to UCS-4 using <command>univention-upgrade</command> or the update module of the &ucsUMC;.
							</para>
						</step>
						<step>
							<para>
								Install the App <quote>KVM virtualization server</quote>.
							</para>
						</step>
						<step>
							<para>
								Reboot the server:
								This removes the Xen hypervisor below the currently running kernel and also loads the updated kernel from UCS-4.
							</para>
						</step>
					</procedure>
				</listitem>
			</itemizedlist>
			<para>
				Now the virtual machines must be re-defined.
				Depending on the number of virtual machines there are two alternatives:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						If only a few virtual machines need migration, it is easier to create new virtual machines which re-use the old images:
					</para>
					<procedure id="uvmm:xen2kvm:reuse">
						<title>Re-define virtual machines only re-using images</title>
						<step>
							<para>
								Go to the &ucsUMC; of the <application>QEMU/KVM</application> server and open the <emphasis>&ucsUVMM;</emphasis> module.
							</para>
						</step>
						<step>
							<para>
								Create a new virtual machine using the profile matching the guest operating system.
							</para>
						</step>
						<step>
							<para>
								When asked for the disk images, select <quote>Choose existing image</quote> as <quote>Drive type</quote> and select the existing image from the corresponding storage pool.
							</para>
							<para>
								Repeat this step for all drives.
							</para>
							<para>
								Pay special attention to the <quote>Image format</quote> if you performed the conversion from <quote>raw</quote> to <quote>qcow2</quote> mentioned above.
							</para>
						</step>
						<step>
							<para>
								Finish creating the machine but do not start it yet.
							</para>
						</step>
						<step>
							<para>
								Re-open the virtual machine configuration and go to the <quote>Devices</quote> tab.
								Edit all network interfaces and change the <quote>MAC address</quote> back to the original one.
								You can get it for example from the XML definition file.
								Otherwise the operating system might detect the change as a new network interface and will require further manual updates like deleting <filename>/etc/udev/rules/70-persistent-net.rules</filename> for Linux or re-configuring the network in Windows.
							</para>
							<para>
								Also verify that the <quote>Source</quote> setting matches the name of your bridge interface, as this might have changed from <filename class="devicefile">eth<replaceable>0</replaceable></filename> to <filename class="devicefile">br<replaceable>0</replaceable></filename>.
								See <xref linkend="uvmmext:kvm"/> for more details.
							</para>
						</step>
						<step>
							<para>
								Save the modified virtual machine configuration.
							</para>
						</step>
					</procedure>
				</listitem>
				<listitem>
					<para>
						If many virtual machines need updating, the <abbrev>XML</abbrev> definition from <application>Xen</application> can be semi-automatically transformed into a <abbrev>XML</abbrev> definition for <application>QEMU/KVM</application>.
					</para>
					<procedure id="uvmm:xen2kvm:redefine">
						<title>Re-define virtual machines converting the Xen XML definition</title>
						<step>
							<para>
								Use the command <command>virsh dumpxml --inactive "$vm" &gt;"$vm.xml"</command> to generate the XML file <filename><replaceable>$vm</replaceable>.xml</filename> describing a single virtual machine on the <application>Xen</application> host.
							</para>
						</step>
						<step>
							<para>
								Perform the following changes to the XML document, which are described using the <ulink url="http://www.w3.org/TR/xpath/">XPath</ulink> notation:
							</para>
							<substeps>
								<step>
									<para>
										Change the attribute <literal>/domain/@type</literal> from <literal>xen</literal> to <literal>kvm</literal>.
									</para>
								</step>
								<step>
									<para>
										<application>QEMU/KVM</application> only supports full-virtualization (<abbrev>HVM</abbrev>).
									</para>
									<substeps>
										<step>
											<para>
												Set the element <literal>/domain/os/type</literal> to <literal>hvm</literal>.
											</para>
										</step>
										<step>
											<para>
												Remove the elements <literal>/domain/bootloader</literal> and <literal>/domain/bootloader_args</literal>.
											</para>
										</step>
										<step performance="optional">
											<para>
												Make sure there is an element <literal>/domain/features</literal> enabling <phrase>Advanced Configuration and Power Interface</phrase> (<acronym>ACPI</acronym>) and <phrase>Advanced Programmable Interrupt Controller</phrase> (<acronym>APIC</acronym>).
												They are required for shutdown via <acronym>ACPI</acronym> power button event and for interrupt handling on multi-processor systems.
												If not insert the following <abbrev>XML</abbrev> fragment just after <literal>/domain/os</literal>:
											</para>
											<programlisting language="xml"><![CDATA[
<features>
	<acpi/>
	<apic/>
</features>
]]></programlisting>
										</step>
									</substeps>
								</step>
								<step>
									<para>
										Remove the element <literal>/domain/os/loader</literal> for HVM domains.
									</para>
								</step>
								<step>
									<para>
										The element <literal>/domain/devices/emulator</literal> should point to <filename>/usr/bin/kvm</filename>.
									</para>
								</step>
								<step>
									<para>
										Update each block device <literal>/domain/devices/disk</literal>:
									</para>
									<substeps>
										<step>
											<para>
												In the sub-element <literal>driver</literal> change the following attributes:
											</para>
											<substeps>
												<step>
													<para>
														Change <literal>@type='tap2'</literal> to <literal>qemu</literal>.
													</para>
												</step>
												<step>
													<para>
														Change <literal>@name='aio'</literal> to <literal>raw</literal>.
														If you converted the image file as mentioned above, use <literal>qcow2</literal> instead.
													</para>
												</step>
												<step performance="optional">
													<para>
														If live-migration is used, make sure to change <literal>@cache='none'</literal> or add it if it is missing.
													</para>
												</step>
											</substeps>
										</step>
										<step>
											<para>
												In the sub-element <literal>target</literal> change the following attributes:
											</para>
											<stepalternatives>
												<step>
													<para>
														Replace any <literal>@bus='xen'</literal> with <literal>virtio</literal> and convert the attribute <literal>@dev</literal> from <literal>xvd<replaceable>X</replaceable></literal> to <literal>vd<replaceable>X</replaceable></literal>.
													</para>
												</step>
												<step performance="optional">
													<para>
														Use <literal>@bus='ide'</literal> and <literal>@dev='hd<replaceable>X</replaceable>'</literal> for CD-ROM drives or if an emulated <abbrev>IDE</abbrev> device is preferred to the more efficient <abbrev>VirtIO</abbrev>.
													</para>
												</step>
											</stepalternatives>
										</step>
									</substeps>
								</step>
								<step>
									<para>
										Update each network interface <literal>/domain/devices/interfaces</literal>:
									</para>
									<substeps>
										<step>
											<para>
												Change <literal>model/@type</literal> to <literal>virtio</literal> or any other type supported by <application>QEMU/KVM</application> like <literal>e1000</literal> or <literal>rtl8139</literal>.
											</para>
										</step>
										<step>
											<para>
												Remove any sub-element <literal>script</literal>.
											</para>
										</step>
										<step>
											<para>
												Check that the attribute <literal>source/@bridge</literal> references a valid bridge interface on the target host system.
												See <xref linkend="uvmmext:kvm"/> for more details.
											</para>
										</step>
									</substeps>
								</step>
								<step>
									<para>
										In any element <literal>/domain/devices/console/target</literal> for consoles changed the attribute from <literal>@type='xen'</literal> to <literal>@type='serial'</literal>.
									</para>
								</step>
								<step>
									<para>
										In any element <literal>/domain/devices/input</literal> for absolute pointing devices change the attribute from <literal>@bus='xen'</literal> to <literal>@bus='usb'</literal>.
									</para>
								</step>
							</substeps>
						</step>
						<step>
							<para>
								On the target host define the virtual machine using <command>virsh define "$vm.xml"</command> where <replaceable>$vm.xml</replaceable> is the name of the changed XML file.
							</para>
						</step>
					</procedure>
					<para>
						The following <abbrev>XSLT</abbrev> style sheet file <filename>xen2qemu.xslt</filename> can be used to transform a <application>Xen</application> domain definition into a <application>QEMU/KVM</application> definition.
					</para>
					<programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="uvmm-4.2-xen2qemu.xsl" parse="text"/></programlisting>
					<para>
						It requires an <abbrev>XSLT</abbrev> command line processor, for example the one provided by the package <package>xsltproc</package>.
						Running a command like <command>xsltproc xen2qemu.xslt "xen/$vm.xml" &gt;"qemu/$vm.xml"</command> produces an XML file, which can be copied to the <application>QEMU/KVM</application> host to re-define the virtual machine there as described above.
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="uvmmext:xen:debian">
			<title>Switch to Debian-Xen</title>
			<para>
				The major differences between the UCS version and Debian version are:
			</para>
			<variablelist>
				<varlistentry>
					<term>No &ucsUVMM; integration</term>
					<listitem>
						<simpara>
							Virtual hosts using Xen can not be managed with UVMM in UCS-4 as support for Xen has been removed completely.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Different Xen patch set</term>
					<listitem>
						<simpara>
							The UCS version contained several patches on top of the Debian version, which fixed several issues (<u:bug>18357</u:bug>, <u:bug>23394</u:bug>, <u:bug>23812</u:bug>, <u:bug>36098</u:bug>).
							Their status in Debian is unknown.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Different libvirt patch set</term>
					<listitem>
						<simpara>
							The UCS version of <package>libvirt</package> contained several patches specifically for <application>Xen</application>, which are no longer applied (<u:bug>20024</u:bug>, <u:bug>29532</u:bug>).
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>No blktap Linux kernel module</term>
					<listitem>
						<simpara>
							The UCS Linux kernel contained the module <package>blktap</package> built-in, which was used to provide block devices for virtual machines.
							This module is no longer included in the default kernel, but can be self-compiled using <application>DKMS</application> and the package <package>blktap-dkms</package>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Different network setup</term>
					<listitem>
						<simpara>
							UCS used a custom network script to setup bridging.
							It is not used by Debian.
							As such bridging must be setup manually.
							See <xref linkend="uvmmext:kvm"/> and the chapter on configuring bridges in the <biblioref linkend="ucs-manual"/> for more issues.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Different package layout</term>
					<listitem>
						<simpara>
							UCS-3 had its own source code package for <application>Xen</application>, which was used to build several binary packages.
							This might break an automatic update, as files might be moved between packages.
							The package manager <application>dpkg</application> will then refuse to install the Debian packages.
							As such it is advisable to remove the old UCS packages completely before installing the new Debian based packages.
							The virtual machine definitions and image files are not effected by the removal.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The following commands can be used as a start to migrate to the Debian version of <application>Xen</application>.
			</para>
			<warning>
				<para>
					This is a one-way upgrade path.
					Backup the host and test the procedure in isolation before doing this on a production system!
				</para>
			</warning>
			<programlisting language="sh">
# Remove xen-4.1 before update
apt-get remove xen-4.1 libxenstore3.0 libxen4.1 libxen-dev xen-4.1-dbg
# Upgrade to UCS-4
univention-upgrade
# Re-install xen
ucr set repository/online/unmaintained=yes
univention-install xen
			</programlisting>
			<para>
				After this more manual configuration might be needed, which is beyond the scope of this documentation.
			</para>
		</section>

	</chapter>

	<chapter id="uvmmext:kvm">
		<title>Network setup for virtual machines</title>
		<para>
			With UCS-3 a script renamed the physical interface <filename class="devicefile">eth<replaceable>X</replaceable></filename> into <filename class="devicefile">peth<replaceable>X</replaceable></filename> and created a bridge interface with the old name as a replacement.
			This is no longer recommended as this script only supports a very basic setup and is confusing to most users.
			As such UCS was changed to support bridging, bonding and VLANs, which is described fully in the <biblioref linkend="ucs-manual"/>.
		</para>
		<para>
			Unfortunately this leads to a user visible change of the network interface, as <filename class="devicefile">eth<replaceable>X</replaceable></filename> now no longer is the name of the bridge interface but that of the physical interface again.
			As this interface name is referenced in the domain configurations of all existing virtual machines, they will no longer start.
			This is further complicated by the fact, that each snapshot and saved virtual machine also contains the old information, which should be updated.
		</para>
		<procedure id="uvmm:bridge">
			<title>Convert virtual machines to new network bridge setup</title>
			<step>
				<para>
					Repeat the following steps on each host and for each virtual machine to be updated.
					Use the command <command>virsh list --all</command> to get a list of all defined domains.
				</para>
			</step>
			<step>
				<para>
					For each virtual machine named <replaceable>$vm</replaceable> update the persistent domain configuration using the following steps:
				</para>
				<substeps>
					<step>
						<para>
							Run the command <command>virsh edit "$vm"</command> to get the configuration opened in an editor.
						</para>
					</step>
					<step>
						<para>
							In the XML file lookup all network interfaces below <literal>/domain/devices/interfaces/source</literal> and change the attribute <literal>bridge</literal> from <literal>eth0</literal> to <literal>br0</literal> (or whatever).
						</para>
					</step>
					<step>
						<para>
							Quit the editor to save the file.
						</para>
					</step>
				</substeps>
			</step>
			<step performance="optional">
				<para>
					If the virtual machine has snapshots, they need to be updated as well.
					Use the command <command>virsh snapshot-list "$vm"</command> to get a list of all snapshots.
				</para>
				<para>
					For each snapshot named <replaceable>$snap</replaceable> update the domain configuration of that snapshot using the following steps:
				</para>
				<substeps>
					<step>
						<para>
							Run the command <command>virsh snapshot-edit "$vm" "$snap"</command> to get the configuration opened in an editor.
						</para>
					</step>
					<step>
						<para>
							In the XML file lookup all network interfaces below <literal>/domainsnapshot/domain/devices/interfaces/source</literal> and change the attribute <literal>bridge</literal> from <literal>eth0</literal> to <literal>br0</literal> (or whatever).
						</para>
					</step>
					<step>
						<para>
							Quit the editor to save the file.
						</para>
					</step>
				</substeps>
			</step>
			<step performance="optional">
				<para>
					If the domain is suspend to disk, the suspend image also contains a copy of the domain configuration.
					Use the command <command>virsh dominfo "$vm"</command> to check <literal>Managed save</literal>.
					If it is <literal>yes</literal>, the image must be either updates or discarded.
				</para>
				<stepalternatives>
					<step>
						<para>
							The virtual machine can be resumed and then be shut down cleanly.
							This removes the suspend image cleanly, so it no longer must be modified.
						</para>
					</step>
					<step>
						<para>
							Run the command <command>virsh managedsave-remove "$vm"</command> to discard the saved data.
							This will remove the runtime state of the virtual machine, but the persistent date stored in the image files is not discarded.
							Normally the operating system will then perform a file system check as it looks like the virtual machine has crashed while running.
						</para>
					</step>
					<step>
						<para>
							To update the image, run the command <command>virsh save-image-edit "/var/lib/libvirt/qemu/save/$vm.save"</command>.
							Perform the same changes as described in step 2.
						</para>
					</step>
				</stepalternatives>
			</step>
		</procedure>

		<section id="uvmmext:kvm:migrate">
			<title>Migrating virtual machines between hosts</title>
			<para>
				(Live-)migration also transfers the domain configuration.
				This breaks when the network interface names differ between the source and destination host.
				Because of that it is strongly advised to shut down any virtual machine cleanly and to transfer them as described above.
			</para>
			<para>
				There is a second option available which allows updating virtual machines while they are migrated from a UCS-3 to a UCS-4 host.
				<application>libvirt</application> provides a hook mechanism, which can be used to rewrite the virtual machine configuration on-the-fly for incoming migrations.
				This is fully described in the <ulink url="http://libvirt.org/hooks.html">libvirt hook documentation</ulink>.
			</para>
			<para>
				The following example can be used to convert the network interface name <filename class="devicefile">eth0</filename> to <filename class="devicefile">br0</filename>.
				The following script must be copied to <filename>/etc/libvirt/hooks/qemu</filename> and be marked as executable using <command>chmod +x</command>:
			</para>
			<programlisting language="sh"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="uvmm-4.2-qemu_hook.sh" parse="text"/></programlisting>
			<para>
				The script uses the <command>xsltproc</command> <abbrev>XSLT</abbrev> command line processor, which is provided by the package <package>xsltproc</package>.
				The corresponding style sheet file must be copies to <filename>/etc/libvirt/hooks/qemu.xsl</filename>, which looks like this:
			</para>
			<programlisting language="xml"><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="uvmm-4.2-qemu_hook.xsl" parse="text"/></programlisting>
			<warning>
				<para>
					Migration can only be done in the direction UCS-3 to UCS-4, not the reverse.
					As UCS-4 is using a newer version of <application>libvirt</application>, additional settings are added to the virtual machine configuration, which older versions can't process.
					Make sure to backup the pre-migration configuration using <command>virsh --inactive dumpxml "$vm" &gt;"$vm.xml"</command>.
				</para>
			</warning>
		</section>

		<section id="uvmmext:kvm:profile">
			<title>UVMM profiles</title>
			<para>
				In addition to that the UVMM profiles should be updated as well, as they name the network interface which is used to connect newly created virtual machines.
				This is described in the <biblioref linkend="ucs-manual"/> in <emphasis>UVMM chapter</emphasis> in the section <emphasis>Changing default network</emphasis>.
			</para>
		</section>

	</chapter>

	<bibliography id="bibliography">
		<bibliomixed id="ucs-manual"/>
	</bibliography>
</book>
<!-- vim:set ts=2 sw=2 noet: -->
