<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="chap:ldap">
	<title>Lightweight Directory Access Protocol (<acronym>LDAP</acronym>) in UCS
	</title>
	<section id="ldap:general">
		<title>General</title>
		<para>
			An <acronym>LDAP</acronym> server provides authenticated and controlled access to directory objects over the network.
			<acronym>LDAP</acronym> objects consist of a collection of attributes which conform to so called <acronym>LDAP</acronym> schemata.
			An in depth documentation of <acronym>LDAP</acronym> is beyond the scope of this document, other sources cover this topic exhaustively,
			e.g. <ulink url="http://www.zytrax.com/books/ldap/"/> or the man pages (<citerefentry><refentrytitle>slapd.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>, <citerefentry><refentrytitle>slapd.access</refentrytitle><manvolnum>5</manvolnum></citerefentry>).
		</para>
		<para>
			At least it should be noted that OpenLDAP offers two fundamentally different tool sets for direct access or modification of LDAP data:
			The <command>slap<replaceable>*</replaceable></command> commands (<command>slapcat</command>, etc.) are very low level, operating directly on the <acronym>LDAP</acronym> backend data and
			should only be used in rare cases, usually with the LDAP server not running. The <command>ldap<replaceable>*</replaceable></command> commands (<command>ldapsearch</command>, etc.) on the
			other hand are the proper way to perform LDAP operations from the command line and their functionality can equivalently be used from all major
			programming languages.
		</para>
		<para>
			On top of the raw <acronym>LDAP</acronym> layer, the Univention Directory Manager offers an object model on a higher level,
			featuring advanced object semantics (see <xref linkend="chap:udm"/>). That is the level that usually appropriate for app developers, which
			should be considered before venturing down to the level of direct <acronym>LDAP</acronym> operations. On the other hand, for the development
			of new UDM extensions it is important to understand some of the essential concepts of <acronym>LDAP</acronym> as used in UCS.
		</para>
		<para>
			One essential trait of <acronym>LDAP</acronym> as used in UCS, is the strict enforcement of <acronym>LDAP</acronym> schemata.
			An <acronym>LDAP</acronym> server refuses to start if an unknown <acronym>LDAP</acronym> attribute is referenced either in the configuration
			or in the backend data. This makes it critically important to install schemata on all systems. To simplify this task UCS features a builtin
			mechanism for automatic schema replication to all UCS hosted <acronym>LDAP</acronym> servers in the UCS domain
			(see <xref linkend="chap:listener"/>).
			The schema replication mechanism is triggered by installation of a new schema extension package on the UCS master.
			For redundancy it is strongly recommended to install schema extension packages also on the UCS backup systems. This way, a UCS backup
			can replace a UCS master in case the master needs to be replaced for some reason. To simplify these tasks even further, UCS offers methods
			to register new <acronym>LDAP</acronym> schemata and associated <acronym>LDAP</acronym> ACLs from any UCS system.
		</para>
	</section>

	<section id="settings:ldapschema">
		<title>Packaging LDAP Schema Extensions</title>
		<para>
			For some purposes, e.g. for app installation, it is convenient to be able to register a new <acronym>LDAP</acronym> schema extension
			from any system in the UCS domain. For this purpose, the schema extension can be stored as a special type of UDM object. The module
			responsible for this type of objects is called <classname>settings/ldapschema</classname>. As these objects are replicated throughout the
			UCS domain, the &ucsMaster; and &ucsBackup; systems listen for modifications of these objects and integrate them into the local
			<acronym>LDAP</acronym> schema directory. As noted above, this simplifies the task of keeping the schema on the &ucsBackup; systems
			up to date with that on the &ucsMaster;.
		</para>
		<para>
			The commands to create the <acronym>LDAP</acronym> schema extension objects in UDM may be put into any join script (see <xref linkend="chap:join"/>).
			A <acronym>LDAP</acronym> schema extension object is created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			<acronym>LDAP</acronym> schema extension objects can be stored anywhere in the <acronym>LDAP</acronym> directory, but the recommended location would be <literal>cn=ldapschema,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The UDM module <classname>settings/ldapschema</classname> requires several parameters:
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the schema extension.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>data</literal> (required)</term>
				<listitem>
					<simpara>
						The actual schema data in bzip2 and base64 encoded format.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>filename</literal> (required)</term>
				<listitem>
					<simpara>
						The file name the schema should be written to on &ucsMaster; and &ucsBackup;. The file name must not contain any path elements.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>package</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the Debian package which creates the object.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>packageversion</literal> (required)</term>
				<listitem>
					<simpara>
						Version of the Debian package which creates the object. For object modifications the version number needs to increase unless the package name is modified as well.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>appidentifier</literal> (optional)</term>
				<listitem>
					<simpara>
						The identifier of the app which creates the object. This is important to indicate that the object is required as long as the app is installed anywhere in the UCS domain.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>active</literal> (internal)</term>
				<listitem>
					<simpara>
						A boolean flag used internally by the &ucsMaster; to signal availability of the schema extension (default: <literal>FALSE</literal>).
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Since many of these parameters are determined automatically by the <function>ucs_registerLDAPExtension</function> shell library function, it is recommended to use the shell library function to create these objects (see <xref linkend="join:libraries:shell"/>).
		</para>
		<example id="join:registerSchema">
			<title>Schema registration in join script</title>
		<programlisting language="sh"><![CDATA[
export UNIVENTION_APP_IDENTIFIER="appID-appVersion"	## example
. /usr/share/univention-lib/ldap.sh

ucs_registerLDAPExtension "$@" \
  --schema /path/to/appschemaextension.schema
		]]></programlisting>
		</example>
	</section>

	<section id="settings:ldapacl">
		<title>Packaging LDAP ACL Extensions</title>
		<para>
			For some purposes, e.g. for app installation, it is convenient to be able to register a new <acronym>LDAP</acronym> ACL extension
			from any system in the UCS domain. For this purpose, the UCR template for an ACL extension can be stored as a special type of UDM object.
			The module responsible for this type of objects is called <classname>settings/ldapacl</classname>. As these objects are replicated throughout the
			UCS domain, the &ucsMaster;, &ucsBackup; and &ucsSlave; systems listen for modifications on these objects and integrate them into the local
			<acronym>LDAP</acronym> ACL UCR template directory. This simplifies the task of keeping the <acronym>LDAP</acronym> ACLs on the &ucsBackup; systems
			up to date with those on the &ucsMaster;.
		</para>
		<para>
			The commands to create the <acronym>LDAP</acronym> ACL extension objects in UDM may be put into any join script (see <xref linkend="chap:join"/>).
			A <acronym>LDAP</acronym> ACL extension object is created by using the <acronym>UDM</acronym> command line interface <command>univention-directory-manager</command> or its alias <command>udm</command>.
			<acronym>LDAP</acronym> ACL extension objects can be stored anywhere in the <acronym>LDAP</acronym> directory, but the recommended location would be <literal>cn=ldapacl,cn=univention,</literal> below the <acronym>LDAP</acronym> base.
			Since the join script creating the attribute may be called on multiple hosts, it is a good idea to add the <option>--ignore_exists</option> option, which suppresses the error exit code in case the object already exists in <acronym>LDAP</acronym>.
		</para>
		<para>
			The UDM module <classname>settings/ldapacl</classname> requires several parameters:
		</para>
		<variablelist>
			<varlistentry><term><literal>name</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the ACL extension.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>data</literal> (required)</term>
				<listitem>
					<simpara>
						The actual ACL UCR template data in bzip2 and base64 encoded format.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>filename</literal> (required)</term>
				<listitem>
					<simpara>
						The file name the ACL UCR template data should be written to on &ucsMaster;, &ucsBackup; and  &ucsSlave;. The file name must not contain any path elements.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>package</literal> (required)</term>
				<listitem>
					<simpara>
						Name of the Debian package which creates the object.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>packageversion</literal> (required)</term>
				<listitem>
					<simpara>
						Version of the Debian package which creates the object. For object modifications the version number needs to increase unless the package name is modified as well.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>appidentifier</literal> (optional)</term>
				<listitem>
					<simpara>
						The identifier of the app which creates the object. This is important to indicate that the object is required as long as the app is installed anywhere in the UCS domain.
						Defaults to <literal>string</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionstart</literal> (optional)</term>
				<listitem>
					<simpara>
						Minimal required UCS version. The UCR template for the ACL is only activated by systems with a version higher than or equal to this.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>ucsversionend</literal> (optional)</term>
				<listitem>
					<simpara>
						Maximal required UCS version. The UCR template for the ACL is only activated by systems with a version lower or equal than this. To specify validity for the whole 4.1-x release range a value like 4.1-99 may be used.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry><term><literal>active</literal> (internal)</term>
				<listitem>
					<simpara>
						A boolean flag used internally by the &ucsMaster; to signal availability of the ACL extension on the &ucsMaster; (default: <literal>FALSE</literal>).
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Since many of these parameters are determined automatically by the <function>ucs_registerLDAPExtension</function> shell library function, it is recommended to use the shell library function to create these objects (see <xref linkend="join:libraries:shell"/>).
		</para>
		<example id="join:registerACL">
			<title>LDAP ACL registration in join script</title>
		<programlisting language="sh"><![CDATA[
export UNIVENTION_APP_IDENTIFIER="appID-appVersion"	## example
. /usr/share/univention-lib/ldap.sh

ucs_registerLDAPExtension "$@" \
  --acl /path/to/appaclextension.acl
		]]></programlisting>
		</example>
	</section>

	<section id="join:secret">
		<title>LDAP secrets
			<indexterm><primary>Domain join</primary><secondary>Domain credentials</secondary></indexterm>
		</title>
		<para>
			The credentials for different UCS domain accounts are stored in plain-text files on some UCS systems.
			The files are named <filename>/etc/<replaceable>*</replaceable>.secret</filename>.
			They are owned by the user <literal>root</literal> and allow read-access for different groups.
		</para>
		<variablelist>
			<varlistentry>
				<term><filename>/etc/ldap.secret</filename> for <uri>cn=admin,<replaceable>$ldap_base</replaceable></uri></term>
				<listitem>
					<simpara>
						This account has full write access to all LDAP entries.
						The file is only available on master and &ucsBackup; systems and is owned by the group <literal>DC Backup Hosts</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<!--
			<varlistentry>
				<term><filename>/etc/ldap-backup.secret</filename> for <uri>cn=backup,<replaceable>$ldap_base</replaceable></uri></term>
				<listitem>
					<remark>PMH: Is this still required? Bug #31252</remark>
					<simpara>
						The file is only available on &ucsMaster; and &ucsBackup; systems and is owned by the group <literal>DC Backup Hosts</literal>.
					</simpara>
				</listitem>
			</varlistentry>
				-->
			<varlistentry>
				<term><filename>/etc/machine.secret</filename> for <uri><replaceable>$ldap_hostdn</replaceable></uri></term>
				<listitem>
					<simpara>
						Each host uses its account to get at least read-access to LDAP.
						Domain controllers in the container <uri>cn=dc,cn=computers,<replaceable>$ldap_base</replaceable></uri> get additional rights to access LDAP attributes.
						The file is available on all joined system roles and is readable only by the local <literal>root</literal> user and group.
					</simpara>
				</listitem>
			</varlistentry>
			<!--
			<varlistentry>
				<term><filename>/etc/backup-join.secret</filename> for <uri>uid=join-backup,cn=users,<replaceable>$ldap_base</replaceable></uri></term>
				<listitem>
					<remark>PMH: Is this still required? Bug #31252</remark>
					<simpara>
						The file is available on all Domaincontroller systems and is owned by the group <literal>Backup Join</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>/etc/slave-join.secret</filename> for <uri>uid=join-slave,cn=users,<replaceable>$ldap_base</replaceable></uri> </term>
				<listitem>
					<remark>PMH: Is this still required? Bug #31252</remark>
					<simpara>
						The file is available on all Domaincontroller systems and is owned by the group <literal>Slave Join</literal>.
					</simpara>
				</listitem>
			</varlistentry>
			-->
		</variablelist>
		<para>
			During package installation, only the maintainer scripts (see <xref linkend="deb:scripts"/>) on master and &ucsBackup; can use their <literal>root</literal> permission to directly read <filename>/etc/ldap.secret</filename>.
			Thus only on those roles the join scripts get automatically executed when the package is installed.
			On all other system roles, the join scripts need to be executed manually.
			This can either be done through the <emphasis>UMC Join module</emphasis> or through the command line tool <command>univention-run-join-scripts</command>.
			Both methods require appropriate credentials.
		</para>

		<section id="join:secret:change">
			<title>Password change
				<indexterm><primary>Domain join</primary><secondary>Domain credentials</secondary><tertiary>Machine credential change</tertiary></indexterm>
				<indexterm><primary>Server password change</primary><see>Domain join</see></indexterm>
			</title>

			<para>
				To reconfirm the trust relation between UCS systems, computers need to regularly change the password associated with the machine account.
				This is controlled through the &ucsUCRV; <envar>server/password/change</envar>.
				For UCS servers this is evaluated by the script <filename>/usr/lib/univention-server/server_password_change</filename>, which is invoked nightly at 01:00 by <citerefentry><refentrytitle>cron</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
				The interval is controlled through a second &ucsUCRV; <envar>server/password/interval</envar>, which defaults to 21 days.
			</para>
			<para>
				The password is stored in the plain text file <filename>/etc/machine.secret</filename>.
				Many long running services read these credentials only on startup, which breaks when the password is changed while they are still running.
				Therefore UCS provides a mechanism to invoke arbitrary commands, when the machine password is changed.
				This can be used for example to restart specific services.
			</para>
			<para>
				Hook scripts should be placed in the directory <filename class="directory">/usr/lib/univention-server/server_password_change.d/</filename>.
				The name must consist of only digits, upper and lower ASCII characters, hyphens and underscores.
				They file must be executable and is called via <citerefentry><refentrytitle>run-parts</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
				It receives one argument, which is used to distinguish three phases:
			</para>
			<procedure id="join:serverPassword:procedure">
				<title>Server password change procedure</title>
				<step>
					<para>
						Each script will be called with the argument <literal>prechange</literal> before the password is changed.
						If any script terminates with an exit status unequal zero, the change is aborted.
					</para>
				</step>
				<step>
					<para>
						A new password is generated locally using <citerefentry><refentrytitle>makepasswd</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
						It is changed in the Univention directory service via UDM and stored in <filename>/etc/machine.secret</filename>.
						<remark>PMH: hard coded to 8 characters Bug #31281</remark>
						The old password is logged in <filename>/etc/machine.secret.old</filename>.
					</para>
					<para>
						If anything goes wrong in this step, the change is aborted and the changes need to be rolled back.
					</para>
				</step>
				<step>
					<para>
						All hook scripts are called again.
					</para>
					<stepalternatives>
						<step>
							<para>
								If the password change was successful, <option>postchange</option> gets passed to the hook scripts.
								This should complete any change prepared in the <literal>prechange</literal> phase.
							</para>
						</step>
						<step>
							<para>
								If the password change failed for any reason, all hook scripts are called with the argument <option>nochange</option>.
								This should undo any action already done in the <literal>prechange</literal> phase.
							</para>
						</step>
					</stepalternatives>
				</step>
			</procedure>

			<example id="join:serverPassword:example">
				<title>Server password change example</title>
				<para>
					Install this file to <filename class="directory">/usr/lib/univention-server/server_password_change.d/</filename>.
				</para>
				<programlisting language="sh"><![CDATA[
#!/bin/sh
case "$1" in
prechange)
	# nothing to do before the password is changed
	exit 0
	;;
nochange)
	# nothing to do after a failed password change
	exit 0
	;;
postchange)
	# restart daemon after password was changed
	invoke-rc.d my-daemon restart
	;;
esac
				]]></programlisting>
				<para>
					init-scripts should only be invoked indirectly through <citerefentry><refentrytitle>invoke-rc.d</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
					This is required for <command>chroot</command> environments and allows the policy layer to control starting and stopping in certain special situations like during an system upgrade.
					<remark>PMH: we need to use it too Bug #18497</remark>
				</para>
			</example>
		</section>

	</section>

</chapter>
