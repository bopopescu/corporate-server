<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="chap:ucr">
	<title>Univention Config Registry
		<indexterm><primary>Config Registry</primary></indexterm>
		<indexterm><primary>UCR</primary><see>Config Registry</see></indexterm>
		<indexterm><primary>Registry</primary><see>Config Registry</see></indexterm>
	</title>
	<para>
		The Univention Config Registry (<acronym>UCR</acronym>) is a local mechanism, which is used on all <acronym>UCS</acronym> system roles to consistently configure all services and applications.
		It consists of a database, were the currently configured values are stored, and a mechanism to trigger certain actions, when values are changed.
		This is mostly used to create configuration files from templates by filling in the configured values.
		In addition to using simple place holders its also possible to use Python code for more advanced templates or to call external programs when values are changed.
		<acronym>UCR</acronym> values can also be configured through an <acronym>UDM</acronym> policy in Univention directory service (<acronym>LDAP</acronym>), which allows values to be set consistently for multiple hosts of a domain.
	</para>
	<remark>PMH: Bug #29471</remark>

	<section id="ucr:usage"><title>Using UCR</title>
		<para>
			&ucsUCR; provides two interfaces, which allows easy access from shell scripts and Python programs.
		</para>

		<section id="ucr:usage:shell"><title>Using UCR from shell</title>
			<para>
				<command>univention-config-registry</command> (and its alias <command>ucr</command>) can be invoked directly from shell.
				The most commonly used functions are:
			</para>
			<variablelist>
				<varlistentry>
					<term>
						<cmdsynopsis>
							<command>ucr</command>
							<arg choice='plain'>set</arg>
							<group choice='plain' rep='repeat'>
								<arg>
									<replaceable>key</replaceable>=<replaceable>value</replaceable>
								</arg>
								<arg>
									<replaceable>key</replaceable>?<replaceable>value</replaceable>
								</arg>
							</group>
						</cmdsynopsis>
					</term>
					<listitem>
						<para>
							Set &ucsUCRV; <varname>key</varname> to the given <varname>value</varname>.
							Using <literal>=</literal> forces an assignment, while <literal>?</literal> only sets the value if the variable is unset.
						</para>
						<example id="ucr:set">
							<title>Use of <command>ucr set</command></title>
							<programlisting><![CDATA[
ucr set print/papersize?a4 \
	variable/name=value
							]]></programlisting>
						</example>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<cmdsynopsis>
							<command>ucr</command>
							<arg choice='plain'>get</arg>
							<arg choice='plain'>
								<replaceable>key</replaceable>
							</arg>
						</cmdsynopsis>
					</term>
					<listitem>
						<para>
							Return the current value of the &ucsUCRV; <varname>key</varname>.
						</para>
						<example id="ucr:get">
							<title>Use of <command>ucr get</command></title>
							<programlisting><![CDATA[
case "$(ucr get system/role)" in
	domaincontroller_*)
		echo "Running on a UCS Domain Controller"
		;;
esac
								]]></programlisting>
						</example>
						<para>
							For variables containing boolean values the shell-library-function <function>is_ucr_true <replaceable>key</replaceable></function> from <filename>/usr/share/univention-lib/ucr.sh</filename> should be used.
							It returns 0 (success) for the values <simplelist type="inline"><member>"1"</member><member>"yes"</member><member>"on"</member><member>"true"</member><member>"enable"</member><member>"enabled"</member></simplelist>, 1 for the negated values <simplelist type="inline"><member>"0"</member><member>"no"</member><member>"off"</member><member>"false"</member><member>"disable"</member><member>"disabled"</member></simplelist>.
							For all other values it returns a value of 2 to indicate inappropriate usage.
						</para>
						<example id="ucr:true">
							<title>Use of <command>is_ucr_true</command></title>
							<programlisting><![CDATA[
. /usr/share/univention-lib/ucr.sh
if is_ucr_true repository/online/unmaintained
then
	echo "Unmaintained is enabled"
fi
								]]></programlisting>
						</example>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<cmdsynopsis>
							<command>ucr</command>
							<arg choice='plain'>unset</arg>
							<arg choice='plain' rep='repeat'>
								<replaceable>key</replaceable>
							</arg>
						</cmdsynopsis>
					</term>
					<listitem>
						<para>
							Unset the &ucsUCRV; <varname>key</varname>.
						</para>
						<example id="ucr:unset">
							<title>Use of <command>ucr unset</command></title>
							<programlisting><![CDATA[
ucr unset print/papersize variable/namme
							]]></programlisting>
						</example>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<cmdsynopsis>
							<command>ucr</command>
							<arg choice='plain'>shell</arg>
							<arg choice='opt' rep='repeat'>
								<replaceable>key</replaceable>
							</arg>
						</cmdsynopsis>
					</term>
					<listitem>
						<para>
							Export some or all &ucsUCRV;s in a shell compatible manner as environment variables.
							All shell-incompatible characters in variable names are substituted by underscores (<literal>_</literal>).
						</para>
						<example id="ucr:shell">
							<title>Use of <command>ucr shell</command></title>
							<programlisting><![CDATA[
eval "$(ucr shell)"
case "$server_role" in
	domaincontroller_*)
		echo "Running on a UCS Domain Controller serving $ldap_base"
		;;
esac
							]]></programlisting>
						</example>
						<para>
							It is often easier to export all variables once and than reference the values through shell variables.
						</para>
						<warning>
							<para>
								Be careful with shell quoting, since several &ucsUCRV;s contain shell meta characters.
								Use <command>eval "$(ucr shell)"</command>.
							</para>
						</warning>
					</listitem>
				</varlistentry>
			</variablelist>
			<note>
				<para>
					<command>ucr</command> is installed as <filename>/usr/sbin/ucr</filename>, which is not on the search path <envar>$PATH</envar> of normal users.
					Changing variables requires root access to <filename>/etc/univention/base.conf</filename>, but reading works for normal users too, if <filename>/usr/sbin/ucr</filename> is invoked directly.
				</para>
			</note>
		</section>

		<section id="ucr:usage:python"><title>Using UCR from Python</title>
			<para>
				<acronym>UCR</acronym> also provides a Python binding, which can be used from any Python program.
				An instance of <classname>univention.config_registry.ConfigRegistry</classname> needs to be created first.
				After loading the current database state with <methodname>load()</methodname> the values can be accessed by using the instance like a Python dictionary:
			</para>
			<example id="ucr:python:read">
				<title>Reading a &ucsUCRV; in Python</title>
				<programlisting><![CDATA[
from univention.config_registry import ConfigRegistry
ucr = ConfigRegistry()
ucr.load()
print ucr['variable/name']
print ucr.get('variable/name', '<not set>')
				]]></programlisting>
			</example>
			<para>
				For variables containing boolean values the methods <methodname>is_true()</methodname> and <methodname>is_false()</methodname> should be used.
				The former returns <literal>True</literal> for the values <simplelist type="inline"><member>"1"</member><member>"yes"</member><member>"on"</member><member>"true"</member><member>"enable"</member><member>"enabled"</member></simplelist>, while the later one returns <literal>True</literal> for the negated values <simplelist type="inline"><member>"0"</member><member>"no"</member><member>"off"</member><member>"false"</member><member>"disable"</member><member>"disabled"</member></simplelist>.
				Both methods accept an optional argument <option>default</option>, which is returned as-is when the variable is not set.
			</para>
			<example id="ucr:python:bool">
				<title>Reading boolean &ucsUCRV;s in Python</title>
				<programlisting><![CDATA[
if ucr.is_true('repository/online/unmaintained'):
	print "unmaintained is explicitly enabled"
if ucr.is_true('repository/online/unmaintained', True):
	print "unmaintained is enabled"
if ucr.is_false('repository/online/unmaintained'):
	print "unmaintained is explicitly disabled"
if ucr.is_false('repository/online/unmaintained', True):
	print "unmaintained is disabled"
				]]></programlisting>
			</example>
			<para>
				Modifying variables requires a different approach.
				The function <function>ucr_update()</function> should be used to set and unset variables.
			</para>
			<example id="ucr:python:change">
				<title>Changing &ucsUCRV;s in Python</title>
				<programlisting><![CDATA[
from univention.config_registry.frontend import ucr_update
ucr_update(ucr, {
	'foo': 'bar',
	'baz': '42',
	'bar': None,
	})
				]]></programlisting>
			</example>
			<para>
				The function <function>ucr_update()</function> requires an instance of <classname>ConfigRegistry</classname> as its first argument.
				The method is guaranteed to be atomic and internally uses file locking to prevent race conditions.
			</para>
			<para>
				The second argument must be a Python dictionary mapping <acronym>UCR</acronym> variable names to their new value.
				The value must be either a string or <constant>None</constant>, which is used to unset the variable.
			</para>
			<para>
				As an alternative the old functions <function>handler_set()</function> and <function>handler_unset()</function> can still be used to set and unset variables.
				Both functions expect an array of strings with the same syntax as used with the command line tool <command>ucr</command>.
				As the functions <function>handler_set()</function> and <function>handler_unset()</function> don't automatically update any instance of <classname>ConfigRegistry</classname>, the method <methodname>load()</methodname> has to be called manually afterwards to reflect the updated values.
			</para>
			<example id="ucr:python:unset">
				<title>Setting and unsetting &ucsUCRV;s in Python</title>
				<programlisting><![CDATA[
from univention.config_registry import handler_set, handler_unset
handler_set(['foo=bar', 'baz?42'])
handler_unset(['foo', 'bar'])
				]]></programlisting>
			</example>
		</section>
	</section>

	<section id="ucr:conf">
		<title>Configuration files</title>
		<para>
			Packages can use the <acronym>UCR</acronym> functionality to create customized configuration files themselves.
			<acronym>UCR</acronym> <firstterm>diverts</firstterm> files shipped by Debian packages and replaces them by generated files.
			If variables are changed, the affected files are <firstterm>committed</firstterm>, which regenerated their content.
			This diversion is persistent and even outlives updates, so they are not overwritten by configuration files of new packages.
		</para>
		<para>
			For this, packages need to ship additional files:
		</para>
		<variablelist>
			<varlistentry>
				<term><filename>conffiles/<replaceable>path/to/file</replaceable></filename></term>
				<listitem>
					<simpara>
						This template file is used to create the target file.
						There exist two variants:
						A <emphasis>single file template</emphasis> consists of only a single file, from which the target file is created, while a <emphasis>multi file template</emphasis> can consist of multiple file fragments, which are concatenated to form the target file.
						See <xref linkend="ucr:conffiles"/> below for more information.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/<replaceable>package</replaceable>.univention-config-registry</filename></term>
				<listitem>
					<simpara>
						This mandatory information file describes the each template file.
						It specifies the type of the template and lists the <acronym>UCR</acronym> variable names, which shall trigger the regeneration of the target file.
						See <xref linkend="ucr:info"/> below for more information.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/<replaceable>package</replaceable>.univention-config-registry-variables</filename></term>
				<listitem>
					<simpara>
						This optional file can add descriptions to <acronym>UCR</acronym> variables, which should describe the use of the variable, its default and allowed values.
						See <xref linkend="ucr:variables"/> below for more information.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/<replaceable>package</replaceable>.univention-config-registry-categories</filename></term>
				<listitem>
					<simpara>
						This optional file can add additional categories to group <acronym>UCR</acronym> variables.
						See <xref linkend="ucr:categories"/> below for more information.
					</simpara>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/<replaceable>package</replaceable>.univention-service</filename></term>
				<listitem>
					<simpara>
						This optional file is used to define long running services.
						See <xref linkend="ucr:services"/> below for more information.
					</simpara>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			In addition to these files code needs to be inserted into the package maintainer scripts (see <xref linkend="deb:scripts"/>), which registers and unregisters these files.
			This is done by calling <command>univention-install-config-registry</command> from <filename>debian/rules</filename> during the package build <literal>binary</literal> phase.
			The command is part of the <package>univention-config-dev</package> package, which needs to be added as a <literal>Build-Depends</literal> build dependency of the source package in <filename>debian/control</filename>.
		</para>

		<section id="ucr:info">
			<title><filename>debian/<replaceable>package</replaceable>.univention-config-registry</filename>
				<indexterm><primary>Config Registry</primary><secondary>Configuration files</secondary></indexterm>
			</title>
			<para>
				This file describes all template files in the package.
				The file is processed and copied by <command>univention-install-config-registry</command> into <filename class="directory">/etc/univention/templates/info/</filename> when the package is built.
			</para>
			<para>
				It can consist of multiple sections, where sections are separated by one blank line.
				Each section consists of multiple key-value-pairs separated by a colon followed by one blank.
				A typical entry has the following structure:
			</para>
			<programlisting><![CDATA[
Type: <type>
[Multifile|File]: <filename>
[Subfile: <fragment-filename>]
Variables: <variable1>
... ]]></programlisting>
			<para>
				<literal>Type</literal> specifies the type of the template, which the following sections describe in more detail.
			</para>

			<section id="ucr:file">
				<title><literal>File</literal>
					<indexterm><primary>Config Registry</primary><secondary>Template</secondary><tertiary>Single file</tertiary></indexterm>
				</title>
				<para>
					A single file template is specified as type <literal>file</literal>.
					It defines a template, were the target file is created from only a single source file.
					A typical entry hat the following structure:
				</para>
				<programlisting><![CDATA[
Type: file
File: <filename>
Variables: <variable1>
User: <owner>
Group: <group>
Mode: <file-mode>
Preinst: <module>
Postinst: <module>
...]]></programlisting>
				<para>
					The following keys can be used:
				</para>
				<variablelist>
					<varlistentry>
						<term><literal>File</literal> (required)</term>
						<listitem>
							<para>
								Specifies both the target and source file name, which are identical.
								The source file containing the template must be put below the <filename class="directory">conffiles/</filename> directory.
								The file can contain any textual content and is processed as described in <xref linkend="ucr:conffiles"/>.
							</para>
							<para>
								The template file is installed to <filename class="directory">/etc/univention/templates/files/</filename>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>Variables</literal> (optional)</term>
						<listitem>
							<para>
								This key can be given multiple times and specifies the name of <acronym>UCR</acronym> variables, which trigger the file commit process.
								This is normally only required for templates using <literal>@!@</literal> Python code regions.
								Variables used in <literal>@%@</literal> sections do not need to be listed explicitly, since <command>ucr</command> extracts them automatically.
							</para>
							<para>
								The variable name is actually a Python regular expression, which can be used to match, for example, all variable names starting with a common prefix.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>User</literal> (optional)</term>
						<term><literal>Group</literal> (optional)</term>
						<term><literal>Mode</literal> (optional)</term>
						<listitem>
							<simpara>
								These specify the symbolic name of the user, group and octal file permissions for the created target file.
								If no values are explicitly provided, then <literal>root:root</literal> is used by default and the file mode is inherited from the source template.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>Preinst</literal> (optional)</term>
						<term><literal>Postinst</literal> (optional)</term>
						<listitem>
							<para>
								These specify the name of a Python module located in <filename class="directory">/etc/univention/templates/modules/</filename>, which is called before and after the target file is re-created.
								The module must implement the following two functions:
							</para>
							<synopsis><![CDATA[
def preinst(config_registry, changes):
	pass
def postinst(config_registry, changes):
	pass]]></synopsis>
							<para>
								Each function receives two arguments:
								The first argument <varname>config_registry</varname> is a reference to an instance of <classname>ConfigRegistry</classname>.
								The second argument <varname>changes</varname> is a dictionary of 2-tuples, which maps the names of all changed variables to (<varname>old-value</varname>, <varname>new-value</varname>).
							</para>
							<para>
								<command>univention-install-config-registry</command> installs the module file to <filename class="directory">/etc/univention/templates/modules/</filename>.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
				<para>
					If a script <filename>/etc/univention/templates/scripts/<replaceable>full-path-to-file</replaceable></filename> exists, it will be called after the file is committed.
					The script is called with the argument <option>postinst</option>.
					It receives the list of changed variables as documented in <xref linkend="ucr:script"/>.
				</para>
			</section>

			<section id="ucr:multifile">
				<title><literal>Multifile</literal>
					<indexterm><primary>Config Registry</primary><secondary>Template</secondary><tertiary>Multi file</tertiary></indexterm>
				</title>
				<para>
					A multi file template is specified once as type <literal>multifile</literal>, which describes the target file name.
					In addition to that multiple sections of type <literal>subfile</literal> are used to describe source file fragments, which are concatenated to form the final target file.
					A typical multifile has the following structure:
				</para>
				<programlisting><![CDATA[
Type: multifile
Multifile: <target-filename>
User: <owner>
Group: <group>
Mode: <file-mode>
Preinst: <module>
Postinst: <module>
Variables: <variable1>

Type: subfile
Multifile: <target-filename>
Subfile: <fragment-filename>
Variables: <variable1>
...]]></programlisting>
				<para>
					The following keys can be used:
				</para>
				<variablelist>
					<varlistentry>
						<term><literal>Multifile</literal> (required)</term>
						<listitem>
							<simpara>
								This specifies the target file name.
								It is also used to link the <literal>multifile</literal> entry to its corresponding <literal>subfile</literal> entries.
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>Subfile</literal> (required)</term>
						<listitem>
							<para>
								The source file containing the template fragment must be put below the <filename class="directory">conffiles/</filename> directory in the Debian source package.
								The file can contain any textual content and is processed as described in <xref linkend="ucr:conffiles"/>.
								The template file is installed to <filename class="directory">/etc/univention/templates/files/</filename>.
							</para>
							<para>
								Common best practice is to start the filename with two digits to allow consistent sorting and to put the file in the directory named like the target filename suffixed by <literal>.d</literal>, that is <filename class="directory">conffiles/<replaceable>target-filename</replaceable>.d/<replaceable>00fragment-filename</replaceable></filename>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>Variables</literal> (optional)</term>
						<listitem>
							<simpara>
								Variables can be declared in both the <literal>multifile</literal> and <literal>subfile</literal> sections.
								The variables from all sections trigger the commit of the target file.
								Until UCS-2.4 only the <literal>multifile</literal> section was used, since UCS-3.0 the <literal>subfile</literal> section should be preferred (if needed).
							</simpara>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>User</literal> (optional)</term>
						<term><literal>Group</literal> (optional)</term>
						<term><literal>Mode</literal> (optional)</term>
						<term><literal>Preinst</literal> (optional)</term>
						<term><literal>Postinst</literal> (optional)</term>
						<listitem>
							<simpara>Same as above for <literal>file</literal>.</simpara>
						</listitem>
					</varlistentry>
				</variablelist>
				<para>
					The same script hook as above for <literal>file</literal> is also supported.
				</para>
			</section>

			<section id="ucr:script">
				<title><literal>Script</literal>
					<indexterm><primary>Config Registry</primary><secondary>Template</secondary><tertiary>Script</tertiary></indexterm>
				</title>
				<para>
					A script template allows an external program to be called when specific <acronym>UCR</acronym> variables are changed.
					A typical script entry has the following structure:
				</para>
				<programlisting><![CDATA[
Type: script
Script: <filename>
Variables: <variable1>]]></programlisting>
				<para>
					The following keys can be used:
				</para>
				<variablelist>
					<varlistentry>
						<term><literal>Script</literal> (required)</term>
						<listitem>
							<para>
								Specifies the filename of an executable, which is installed to <filename class="directory">/etc/univention/templates/scripts/</filename>.
							</para>
							<para>
								The script is called with the argument <option>generate</option>.
								It receives the list of changed variables on standard input.
								For each changed variable a line containing the name of the variable, the old value, and the new value separated by <literal>@%@</literal> is sent.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>Variables</literal> (required)</term>
						<listitem>
							<simpara>
								Specifies the <acronym>UCR</acronym> variable names, which should trigger the script.
							</simpara>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>

			<section id="ucr:module">
				<title><literal>Module</literal>
					<indexterm><primary>Config Registry</primary><secondary>Template</secondary><tertiary>Module</tertiary></indexterm>
				</title>
				<para>
					A module template allows a Python module to be run when specific <acronym>UCR</acronym> variables are changed.
					A typical module entry has the following structure:
				</para>
				<programlisting><![CDATA[
Type: module
Module: <filename>
Variables: <variable1>
				]]></programlisting>
				<para>
					The following keys can be used:
				</para>
				<variablelist>
					<varlistentry>
						<term><literal>Module</literal> (required)</term>
						<listitem>
							<para>
								Specifies the filename of a Python module, which is installed to <filename class="directory">/etc/univention/templates/modules/</filename>.
							</para>
							<para>
								The module must implement the following function:
							</para>
							<synopsis><![CDATA[
def handler(config_registry, changes):
	pass]]></synopsis>
							<para>
								The function receives two arguments:
								The first argument <varname>config_registry</varname> is a reference to an instance of <classname>ConfigRegistry</classname>.
								The second argument <varname>changes</varname> is a dictionary of 2-tuples, which maps the names of all changed variables to (<varname>old-value</varname>, <varname>new-value</varname>).
							</para>
							<para>
								<command>univention-install-config-registry</command> installs the module to <filename class="directory">/etc/univention/templates/modules/</filename>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>Variables</literal> (required)</term>
						<listitem>
							<simpara>
								Specifies the <acronym>UCR</acronym> variable names, which should trigger the module.
							</simpara>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>

		<section id="ucr:variables">
			<title><filename>debian/<replaceable>package</replaceable>.univention-config-registry-variables</filename>
				<indexterm><primary>Config Registry</primary><secondary>Descriptions</secondary></indexterm>
			</title>
			<para>
				For <acronym>UCR</acronym> variables a description should be registered.
				This description is shown in the <emphasis>Univention Config Registry</emphasis> module of the <acronym>UMC </acronym>as a mouse-over.
				It can also be queried by running <command>ucr info <replaceable>variable/name</replaceable></command> on the command line.
			</para>
			<para>
				The description is provided on a per-package basis as a file, which uses the <abbrev>ini</abbrev>-style format.
				The file is processed and copied by <command>univention-install-config-registry-info</command> into <filename class="directory">/etc/univention/registry.info/variables/</filename>.
				The command <command>univention-install-config-registry-info</command> is invoked indirectly by <command>univention-install-config-registry</command>, which should be called instead from <filename>debian/rules</filename>.
			</para>
			<para>
				For each variable a section of the following structure is defined:
			</para>
			<programlisting><![CDATA[
[<variable/name>]
Description[en]=<description>
Description[<language>]=<description>
Type=<type>
ReadOnly=<yes|no>
Categories=<category,...>]]></programlisting>
			<variablelist>
				<varlistentry>
					<term><literal>[</literal><replaceable>variable/name</replaceable><literal>]</literal> (required)</term>
					<listitem>
						<para>
							For each variable description one section needs to be created.
							The name of the section must match the variable name.
						</para>
						<para>
							To describe multiple variables with a common prefix and/or suffix, the regular expression <literal>.*</literal> can be used to match any sequence of characters.
							This is the only supported regular expression!
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>Description[</literal><replaceable>language</replaceable><literal>]</literal> (required)</term>
					<listitem>
						<simpara>
							A descriptive text for the variable.
							It should mention the valid and default values.
							The description can be given in multiple languages, using the two-letter-code following <biblioref linkend="ISO639"/>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>Type</literal> (required)</term>
					<listitem>
						<simpara>
							The syntax type for the value.
							This is unused in UCS-3.1, but future versions might use this for validating the input.
							Valid values include <literal>str</literal> for strings, <literal>bool</literal> for boolean values, and <literal>int</literal> for integers.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>ReadOnly</literal> (optional)</term>
					<listitem>
						<simpara>
							This declares a variable as read-only and prohibits changing the value through UMC.
							The restriction is not applied when using the command line tool <command>ucr</command>.
							Valid values are <literal>true</literal> for read-only and <literal>false</literal>, which is the default.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>Categories</literal> (required)</term>
					<listitem>
						<simpara>
							A list of categories, separated by comma.
							This is used to group related <acronym>UCR</acronym> variables.
							New categories don't need to be declared explicitly, but it is recommended to do so following <xref linkend="ucr:categories"/>.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="ucr:categories">
			<title><filename>debian/<replaceable>package</replaceable>.univention-config-registry-categories</filename>
				<indexterm><primary>Config Registry</primary><secondary>Categories</secondary></indexterm>
			</title>
			<para>
				<acronym>UCR</acronym> variables can be grouped into categories, which can help administrators to find related settings.
				Categories are referenced from <filename>.univention-config-registry-variables</filename> files (see <xref linkend="ucr:variables"/>).
				They are created on-the-fly, but can be described further by explicitly defining them in a <filename>.univention-config-registry-categories</filename> file.
			</para>
			<para>
				The description is provided on a per-package basis as a file, which uses the <abbrev>ini</abbrev>-style format.
				The file is processed and copied by <command>univention-install-config-registry-info</command> into <filename class="directory">/etc/univention/registry.info/categories/</filename>.
				The command <command>univention-install-config-registry-info</command> is invoked indirectly by <command>univention-install-config-registry</command>, which should be called instead from <filename>debian/rules</filename>.
			</para>
			<para>
				For each category a section of the following structure is defined:
			</para>
			<programlisting><![CDATA[
[<category-name>]
name[en]=<name>
name[<language>]=<translated-name>
icon=<file-name>]]></programlisting>
			<variablelist>
				<varlistentry>
					<term><literal>[</literal><replaceable>category-name</replaceable><literal>]</literal></term>
					<listitem>
						<simpara>
							For each category description one section needs to be created.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>name[</literal><replaceable>language</replaceable><literal>]</literal> (required)</term>
					<listitem>
						<simpara>
							A descriptive text for the category.
							The description can be given in multiple languages, using the two-letter-code following <biblioref linkend="ISO639"/>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>icon</literal> (required)</term>
					<listitem>
						<simpara>
							The file name of an icon in either the Portable Network Graphics (<acronym>PNG</acronym>) format or Graphics Interchange Format (<acronym>GIF</acronym>).
							This is unused in UCS-3.1, but future versions might display this icon for variables in this category.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="ucr:services">
			<title><filename>debian/<replaceable>package</replaceable>.univention-service</filename>
				<indexterm><primary>Config Registry</primary><secondary>Services</secondary></indexterm>
			</title>
			<para>
				Long running services should be registered with <acronym>UCR</acronym> and <acronym>UMC</acronym>.
				This enables administrators to control these daemons using the <acronym>UMC</acronym> module <emphasis>System services</emphasis>.
			</para>
			<para>
				The description is provided on a per-package basis as a file, which uses the <abbrev>ini</abbrev>-style format.
				The file is processed and copied by <command>univention-install-service-info</command> into <filename class="directory">/etc/univention/service.info/services/</filename>.
				The command <command>univention-install-service-info</command> is invoked indirectly by <command>univention-install-config-registry</command>, which should be called instead from <filename>debian/rules</filename>.
			</para>
			<para>
				For each service a section of the following structure is defined:
			</para>
			<programlisting><![CDATA[
[<service-name>]
description[<language>]=<description>
start_type=<service-name>/autostart
systemd=<service-name>.service
icon=<service/icon_name>
programs=<executable>
name=<service-name>
init_scipt=<init.name>]]></programlisting>
			<variablelist>
				<varlistentry>
					<term><literal>[</literal><replaceable>service-name</replaceable><literal>]</literal></term>
					<term><literal>name=</literal><replaceable>service-name</replaceable> (optional)</term>
					<listitem>
						<simpara>
							For each daemon one section needs to be created.
							The service-name should match the name of the init-script in <filename class="directory">/etc/init.d/</filename>.
							If the name differs, it can be overwritten by the <literal>name=</literal> property.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>description[</literal><replaceable>language</replaceable><literal>]</literal> (required)</term>
					<listitem>
						<simpara>
							A descriptive text for the service.
							The description can be given in multiple languages, using the two-letter-code following <biblioref linkend="ISO639"/>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>start_type</literal> (required)</term>
					<listitem>
						<simpara>
							Specifies the name of the <acronym>UCR</acronym> variable, which controls if the service should be started automatically.
							It is recommended to use the shell library <filename>/usr/share/univention-config-registry/init-autostart.lib</filename> to evaluate the setting from the init-script of the service.
							If the variable is set to <literal>false</literal> or <literal>no</literal>, the service should never be started.
							If the variable is set to <literal>manually</literal>, the service should not be started automatically, but invoking the init-script directly with <option>start</option> should still start the service.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>systemd</literal> (optional)</term>
					<listitem>
						<simpara>
							A comma separated list of <package>systemd</package> service names, which are enabled/disabled/masked when <literal>start_type</literal> is used.
							This defaults to the name of the service plus the suffix <literal>.service</literal>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>init_script</literal> (optional)</term>
					<listitem>
						<simpara>
							The name of the legacy init script below <filename class="directory">/etc/init.d/</filename>.
							This defaults to the name of the service.
							This option should not be used any more in favor of <application>systemd</application>.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>programs</literal> (required)</term>
					<listitem>
						<simpara>
							A comma separated list of commands, which must be running to qualify the service as running.
							Each command name is checked against <filename>/proc/*/cmdline</filename>.
							To check the processes for additional arguments, the command can also consist of additional shell-escaped arguments.
						</simpara>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>icon</literal> (optional)</term>
					<listitem>
						<simpara>
							The file name of an icon in either Portable Network Graphics (<acronym>PNG</acronym>) format or Graphics Interchange Format (<acronym>GIF</acronym>) format.
							This is unused in UCS-3.1, but future versions might display the icon for the service.
						</simpara>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

	</section>

	<section id="ucr:conffiles">
		<title>UCR Template files <filename>conffiles/<replaceable>path/to/file</replaceable></filename>
			<indexterm><primary>Config Registry</primary><secondary>Template file</secondary></indexterm>
		</title>
		<para>
			For each file, which should be written, one or more template files need be to created below the <filename class="directory">conffiles/</filename> directory.
			For a single-File template (see <xref linkend="ucr:file"/>), the filename must match the filename given in the <literal>File:</literal> stanza of the <emphasis>file</emphasis> entry itself.
			For a Multifile template (see <xref linkend="ucr:multifile"/>), the filename must match the filename given in the <literal>File:</literal> stanza of the <emphasis>subfile</emphasis> entries.
		</para>
		<para>
			Each template file is normally a text file, where certain sections get substituted by computed values during the file commit.
			Each section starts and ends with a special marker.
			<acronym>UCR</acronym> currently supports the following kinds of markers:
		</para>
		<variablelist>
			<varlistentry>
				<term><literal>@%@</literal> variable reference</term>
				<listitem>
					<para>
						Sections enclosed in <literal>@%@</literal> are simple references to &ucsUCRV;.
						The section is replaced inline by the current value of the variable.
						If the variable is unset, an empty string is used.
					</para>
					<para>
						<command>ucr</command> scans all <literal>file</literal>s and <literal>subfile</literal>s on registration.
						All &ucsUCRV;s used in <literal>@%@</literal> are automatically extracted and registered for triggering the template mechanism.
						They don't need to be explicitly enumerated with <literal>Variables:</literal>-statements in the file <filename>debian/<replaceable>package</replaceable>.univention-config-registry</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>@!@</literal> Python code</term>
				<listitem>
					<para>
						Sections enclosed in <literal>@!@</literal> contain Python code.
						Everything printed to <acronym>STDOUT</acronym> by these sections is inserted into the generated file.
						The Python code can access the <varname>configRegistry</varname><footnote>
							<simpara>
								Historically &ucsUCR; was named <quote>Univention Base Config</quote>.
								For backward compatibility the alias <varname>baseConfig</varname> is still provided.
								It should not be used anymore and will be removed in a future version of <acronym>UCS</acronym>.
							</simpara>
						</footnote> variable, which is an already loaded instance of <classname>ConfigRegistry</classname>.
						Each section is evaluated separately, so no state is kept between different Python sections.
					</para>
					<para>
						All &ucsUCRV;s used in a <literal>@!@</literal> Python section must be manually matched by a <literal>Variables:</literal> statement in the <filename>debian/<replaceable>package</replaceable>.univention-config-registry</filename> file.
						Otherwise the file is not updated on changes of the <acronym>UCR</acronym> variable.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>@%@UCRWARNING=%</literal><replaceable>PREFIX</replaceable><literal>@%@</literal></term>
				<term><literal>@%@UCRWARNING_ASCII=%</literal><replaceable>PREFIX</replaceable><literal>@%@</literal></term>
				<listitem>
					<para>
						This variant of the variable reference inserts a warning text, which looks like this:
					</para>
					<screen><![CDATA[
# Warning: This file is auto-generated and might be overwritten by
#          univention-config-registry.
#          Please edit the following file(s) instead:
# Warnung: Diese Datei wurde automatisch generiert und kann durch
#          univention-config-registry überschrieben werden.
#          Bitte bearbeiten Sie an Stelle dessen die folgende(n) Datei(en):
#
#       /etc/univention/templates/files/etc/hosts.d/00-base
#       /etc/univention/templates/files/etc/hosts.d/20-static
#       /etc/univention/templates/files/etc/hosts.d/90-ipv6defaults
#
					]]></screen>
					<para>
						It should be inserted once at the top to prevent the user from editing the generated file.
						For single File templates, it should be on the top of the template file itself.
						For Multifile templates, it should only be on the top the first subfile.
					</para>
					<para>
						Everything between the equal sign and the closing <literal>@%@</literal> defines the <replaceable>PREFIX</replaceable>, which is inserted at the beginning of each line of the warning text.
						For shell scripts, this should be <literal># </literal>, but other files use different characters to start a comment.
						For files, which don't allow comments, the header should be skipped.
					</para>
					<warning>
						<para>
							Several file formats require the file to start with some <emphasis>magic data</emphasis>.
							For example shell scripts must start with a hash-bang (<literal>#!</literal>) and XML files must start with <literal>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</literal> (if used).
							Make sure to put the warning after these headers!
						</para>
					</warning>
					<para>
						The <literal>UCRWARNING_ASCII</literal> variant only emits 7-bit ASCII characters, which can be used for files, which are not 8 bit clean or unicode aware.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>

	<section id="ucr:build">
		<title>Build integration</title>
		<para>
			During package build time <command>univention-install-config-registry</command> needs to be called.
			This should be done by overriding the <literal>dh_auto_install_target</literal> in <filename>debian/rules</filename>:
		</para>
		<programlisting language="make"><![CDATA[
override_dh_auto_install:
	univention-install-config-registry
	dh_auto_install
		]]></programlisting>
		<para>
			This invocation copies the referenced files to the right location in the binary package staging area <filename>debian/<replaceable>package</replaceable>/etc/univention/</filename>.
			Internally <command>univention-install-config-registry-info</command> and <command>univention-install-service-info</command> are invoked, which should not be called explicitly anymore.
			The calls also insert code into the files <filename>debian/<replaceable>package</replaceable>.preinst.debhelper</filename>, <filename>debian/<replaceable>package</replaceable>.postinst.debhelper</filename> and <filename>debian/<replaceable>package</replaceable>.prerm.debhelper</filename> to register and un-register the templates.
			Therefore it's important that customized maintainer scripts use the <literal>#DEBHELPER#</literal> marker, so that the generated code gets inserted into the corresponding <filename>preinst</filename>, <filename>postinst</filename> and <filename>prerm</filename> files of the generated binary package.
		</para>
		<para>
			The invocation also adds <package>univention-config</package> to <varname>misc:Depends</varname> to ensure that the package is available during package configuration time.
			Therefore it's important that <varname>${misc:Depends}</varname> is used in the <literal>Depends</literal> line of the package section in the <filename>debian/control</filename> file.
		</para>
		<programlisting><![CDATA[
Package: ...
Depends: ..., ${misc:Depends}, ...
		]]></programlisting>
	</section>

	<section id="ucr:example">
		<title>Examples
			<indexterm><primary>Config Registry</primary><secondary>Examples</secondary></indexterm>
			<indexterm><primary>Example</primary><secondary>Config Registry</secondary></indexterm>
		</title>

		<remark>SG: Move this to a sample package</remark>
		<para>
			This sections contains several simple examples for the use of &ucsUCR;.
			The complete source of these examples is available separately.
			The download location is given in each example below.
			Since almost all &ucsUCS; packages use <acronym>UCR</acronym>, their source code provides additional examples.
		</para>

		<section id="ucr:example:minimal">
			<title>Minimal File example
				<indexterm><primary>Config Registry</primary><secondary>Examples</secondary><tertiary>Single File</tertiary></indexterm>
			</title>
			<para>
				This example provides a template for <filename>/etc/papersize</filename>, which is used to configure the default paper size.
				A &ucsUCRV; <envar>print/papersize</envar> is registered, which can be used to configure the papersize.
			</para>
			<para>
				Source code: <u:src>doc/developer-reference/ucr/papersize/</u:src>
			</para>
			<variablelist>
				<varlistentry>
					<term><filename>conffiles/etc/papersize</filename></term>
					<listitem>
						<para>
							The template file only contains one line.
							Please note that this file does not start with the <quote>UCRWARNING</quote>, since the file must only contain the paper size and no comments.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="papersize/conffiles/etc/papersize" parse="text"/></programlisting>
						<para>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/papersize.univention-config-registry</filename></term>
					<listitem>
						<para>
							The file defines the templates and is processed by <command>univention-install-config-registry</command> during the package build and afterwards by <command>univention-config-registry</command> during normal usage.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="papersize/debian/papersize.univention-config-registry" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/papersize.univention-config-registry-variables</filename></term>
					<listitem>
						<para>
							The file describes the newly defined &ucsUCRV;.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="papersize/debian/papersize.univention-config-registry-variables" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/papersize.postinst</filename></term>
					<listitem>
						<para>
							Sets the &ucsUCRV; to a default value after package installation.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="papersize/debian/papersize.postinst" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/rules</filename></term>
					<listitem>
						<para>
							Invoke <command>univention-install-config-registry</command> during package build to install the files to the appropriate location.
							It also creates the required commands for the maintainer scripts (see <xref linkend="deb:scripts"/>) to register and unregister the templates during package installation and removal.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="papersize/debian/rules" parse="text"/></programlisting>
						<para>
							Note that tabulators must be used for indentation in this <application>Makefile</application>-type file.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/control</filename></term>
					<listitem>
						<para>
							The automatically generated dependency on <package>univention-config</package> is inserted by <command>univention-install-config-registry</command> via <filename>debian/papersize.substvars</filename>.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="papersize/debian/control" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="ucr:example:multifile">
			<title>Multifile example
				<indexterm><primary>Config Registry</primary><secondary>Examples</secondary><tertiary>Multifile</tertiary></indexterm>
			</title>
			<para>
				This example provides templates for <filename>/etc/hosts.allow</filename> and <filename>/etc/hosts.deny</filename>, which is used to control access to system services.
				See <citerefentry><refentrytitle>hosts_access</refentrytitle><manvolnum>5</manvolnum></citerefentry> for more details.
			</para>
			<para>
				Source code: <u:src>doc/developer-reference/ucr/hosts/</u:src>
			</para>
			<variablelist>
				<varlistentry>
					<term><filename>conffiles/etc/hosts.allow.d/00header</filename></term>
					<term><filename>conffiles/etc/hosts.deny.d/00header</filename></term>
					<listitem>
						<para>
							The first file fragment of the file.
							It starts with <literal>@%@UCRWARNING=# @%@</literal>, which is replaced by the warning text and a list of all subfiles.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="hosts/conffiles/etc/hosts.allow.d/00header" parse="text"/></programlisting>
						<para>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>conffiles/etc/hosts.allow.d/50dynamic</filename></term>
					<term><filename>conffiles/etc/hosts.deny.d/50dynamic</filename></term>
					<listitem>
						<para>
							A second file fragment, which uses Python code to insert access control entries configured through the &ucsUCRV;s <literal>hosts/allow/</literal> and <literal>hosts/deny/</literal>.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="hosts/conffiles/etc/hosts.allow.d/50dynamic" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/hosts.univention-config-registry</filename></term>
					<listitem>
						<para>
							The file defines the templates and is processed by <command>univention-install-config-registry</command>.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="hosts/debian/hosts.univention-config-registry" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/hosts.univention-config-registry-variables</filename></term>
					<listitem>
						<para>
							The file describes the newly defined &ucsUCRV;s.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="hosts/debian/hosts.univention-config-registry-variables" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="ucr:example:service">
			<title>Services
				<indexterm><primary>Config Registry</primary><secondary>Examples</secondary><tertiary>Services</tertiary></indexterm>
			</title>
			<remark>SG: This is not directly UCR</remark>
			<remark>PMH: It shows how an existing init-script is modified to use the autostart-UCRV. univention-install-service-info is also automatically invoked through univention-install-config-registry. The logic is in univention-config, UMC only adds the graphical UI.</remark>
			<para>
				This example provides a template to control the <command>atd</command> service through an &ucsUCRV; <envar>atd/autostart</envar>.
			</para>
			<para>
				Source code: <u:src>doc/developer-reference/ucr/service/</u:src>
			</para>
			<variablelist>
				<varlistentry>
					<term><filename>conffiles/etc/init.d/atd</filename></term>
					<listitem>
						<para>
							The template replaces the original file with a version, which checks the &ucsUCRV; <envar>atd/autostart</envar> before starting the <command>at</command> daemon.
							Please note that the <quote>UCRWARNING</quote> is put after the hash-bash line.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="service/conffiles/etc/init.d/atd" parse="text"/></programlisting>
						<para>
							Note the inclusion of <filename>init-autostart.lib</filename> and use of <command>check_autostart</command>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/service.univention-config-registry</filename></term>
					<listitem>
						<para>
							The file defines the templates.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="service/debian/service.univention-config-registry" parse="text"/></programlisting>
						<para>
							Note the additional <literal>Mode</literal> statement to mark the file as executable.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/service.univention-config-registry-variables</filename></term>
					<listitem>
						<para>
							The file adds a description for the &ucsUCRV; <envar>atd/autostart</envar>.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="service/debian/service.univention-config-registry-variables" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/service.postinst</filename></term>
					<listitem>
						<para>
							Set the &ucsUCRV; to automatically start the <command>atd</command> on new installations.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="service/debian/service.postinst" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>debian/control</filename></term>
					<listitem>
						<para>
							<package>univention-base-files</package> must be added manually as an additional dependency, since it is used from within the shell code.
						</para>
						<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="service/debian/control" parse="text"/></programlisting>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
	</section>

	<!--
	<section id="ucr:intern"><title>Internals</title>
		<remark>SG: is this right here?</remark>
		<para>
			Some &ucsUCRV; are read-only and must not be modified.
			Otherwise they become out-of-sync with the information stored in <acronym>LDAP</acronym>.
			They are stored in <acronym>UCR</acronym> only to allow easier read access.
		</para>
		<itemizedlist>
			<listitem><simpara>hostname</simpara></listitem>
			<listitem><simpara>domainname</simpara></listitem>
			<listitem><simpara>ldap/base</simpara></listitem>
		</itemizedlist>
		<para>
			Files are diverted using <command>dpkg-divert</command> by <command>ucr</command>.
			There are known problems when diverting <emphasis>Debian conffiles</emphasis> in <filename class="directory">/etc/</filename>, because <command>dpkg</command> tracks the MD5 hash-some of those files to prevent files modified by the user to be over-written, when the package is updated and ships a new version of the file.
		</para>
		<para>
			During package installation, upgrade, and remove <command>ucr register</command>, <command>ucr unregister</command> and <command>ucs update</command> are called to register and un-register the info files.
			UCR builds a cache for faster processing.
		</para>
		<para>
			Package removal: files in <filename class="directory">/etc/</filename> need to be (re-)moved manually.
			Use <citerefentry><refentrytitle>dpkg-maintscript-helper</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
		</para>
	</section>
	-->

</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
