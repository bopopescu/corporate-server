<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE chapter [
	<!ENTITY % extensions SYSTEM "../../stylesheets/macros.ent" >
	<!ENTITY % DocBookDTD PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
	<!ENTITY % entities SYSTEM "../../stylesheets/macros-en.ent" >
	%extensions;
	%DocBookDTD;
	%entities;
]>
<chapter id="chap:packaging"><title>Packaging software
		<indexterm><primary>Packaging</primary></indexterm>
	</title>

	<para>
		This chapter describes how software for UCS is packaged.
		For more details on packaging software in the Debian format, see <xref linkend="chap:debian"/>
	</para>

	<section id="pkg:introduction"><title>Introduction</title>
		<para>
			<acronym>UCS</acronym> is based on the Debian distribution, which is using the <acronym>deb</acronym> format to package software.
			The program <command>dpkg</command> is used for handling a set of packages.
			On installation packages are unpacked and configured, while on un-installation packages are de-configured and the files belonging to the packages are removed from the system.
			On top of that the <application>apt</application>-tools provide a software repository, which allows software to be downloaded from central file servers.
			<filename>Package</filename> files provide an index of all packages contained in the repository, which is used to resolve dependencies between packages:
			while <command>dpkg</command> works on a set of packages given on the command line, <command>apt-get</command> builds that set of packages and their dependencies before invoking <command>dpkg</command> on this set.
			<command>apt-get</command> is a command line tool, which is fully described in its manual page <citerefentry><refentrytitle>apt-get</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
			A more modern version with a text based user interface is <command>aptitude</command>, while <command>synaptic</command> provides a graphical frontend.
		</para>
		<para>
			On UCS systems the administrator is not supposed to use these tools directly.
			Instead all software maintenance can be done through the UMC, which maps the requests to invocations of the commands given above.
		</para>
	</section>

	<section id="pkg:preparation"><title>Preparations</title>
		<para>
			This chapter describes some simple examples using existing packages as examples.
			For downloading and building them, some packages must be installed on the system used as a development system.
			<package>git</package> is used to checkout the source files belonging to the packages.
			<package>build-essential</package> must be installed for building the package.
			<package>devscripts</package> provides some useful tools for maintaining packages.
		</para>
		<para>
			This can be achieved by running the following command:
		</para>
		<programlisting>sudo apt-get install git build-essential devscripts</programlisting>
	</section>

	<section id="pkg:rebuild">
		<title>Example: Re-building an UCS package
			<indexterm><primary>Packaging</primary><secondary>Modifying existing package</secondary></indexterm>
		</title>
		<para>
			Source code: <u:src>doc/developer-reference/packaging/testdeb/</u:src>
		</para>
		<procedure id="pkg:procedure">
			<title>Checking out and building a UCS package</title>
			<step performance="optional">
				<para>Create the top level working directory</para>
				<programlisting><![CDATA[
mkdir work
cd work/
					]]></programlisting>
			</step>
			<step>
				<para>
					Either fetch the latest source code from the GIT version control system or download the source code of the currently packaged version.
				</para>
				<stepalternatives>
					<step>
						<para>Checkout example package from GIT version control system</para>
						<programlisting><![CDATA[
git checkout https://github.com/univention/univention-corporate-server.git
cd univention-corporate-server/base/univention-ssh
							]]></programlisting>
					</step>
					<step>
						<para>Fetch the source code from the Univention Repository server</para>
						<substeps>
							<step>
								<para>Enable unmaintained and source repository once</para>
								<programlisting><![CDATA[
sudo ucr set repository/online/unmaintained=yes \
             repository/online/sources=yes
sudo apt-get update
									]]></programlisting>
							</step>
							<step>
								<para>Fetch source code</para>
								<programlisting><![CDATA[
apt-get source univention-ssh
cd univention-ssh-*/
									]]></programlisting>
							</step>
						</substeps>
					</step>
				</stepalternatives>
			</step>
			<step performance="optional">
				<para>Increment the version number of package to define a newer package</para>
				<programlisting><![CDATA[
debchange --local work 'Private package rebuild'
					]]></programlisting>
			</step>
			<step>
				<para>Install the required build dependencies</para>
				<programlisting><![CDATA[
sudo apt-get build-dep .
					]]></programlisting>
			</step>
			<step>
				<para>Build the binary package</para>
				<programlisting><![CDATA[
dpkg-buildpackage -uc -us -b -rfakeroot
					]]></programlisting>
			</step>
			<step>
				<para>Locally install the new binary package</para>
				<programlisting><![CDATA[
sudo dpkg -i ../univention-ssh_*_*.deb
					]]></programlisting>
			</step>
		</procedure>
	</section>

	<section id="pkg:new">
		<title>Example: Creating a new UCS package
			<indexterm><primary>Packaging</primary><secondary>New package</secondary></indexterm>
		</title>
		<para>
			The following example provides a walk-through for packaging a Python script called <filename>testdeb.py</filename>.
			It creates a file <filename>testdeb-<replaceable>DATE</replaceable>-<replaceable>time</replaceable></filename> in the <filename class="directory">/tmp/</filename> directory.
		</para>
		<para>
			A directory needs to be created for each source package, which hosts all other files and sub-directories.
		</para>
		<programlisting>
mkdir testdeb-0.1
cd testdeb-0.1
		</programlisting>
		<para>
			The file <filename>testdeb.py</filename>, which is the program to be installed, will be put into that directory.
		</para>
		<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="testdeb/testdeb.py" parse="text"/></programlisting>
		<para>
			In addition to the files to be installed some meta-data needs to be created in the <filename class="directory">debian/</filename> sub-directory.
			This directory contains several files, which are needed to build a Debian package.
			The files and their format will be described in the following sections.
		</para>
		<para>
			To create an initial <filename class="directory">debian/</filename> directory with all template files, invoke the <citerefentry><refentrytitle>dh_make</refentrytitle><manvolnum>8</manvolnum></citerefentry> command provided by the package <package>dh-make</package>:
		</para>
		<programlisting>dh_make --native --single --email user@example.com</programlisting>
		<para>
			Here several options are given to create the files for a source package, which contains all files in one archive and only creates one binary package at the end of the build process.
			More details are given in <xref linkend="deb:dhmake"/>.
		</para>
		<para>
			The program will output the following information:
		</para>
		<screen><![CDATA[
Maintainer name  : John Doe
Email-Address    : user@example.com
Date             : Thu, 28 Feb 2013 08:11:30 +0100
Package Name     : testdeb
Version          : 0.1
License          : blank
Type of Package  : Single
Hit <enter> to confirm:
		]]></screen>
		<para>
			The package name <package>testdeb</package> and version <quote>0.1</quote> were determined from the name of the directory <filename class="directory">testdeb-0.1</filename>, the maintainer name and address were gathered from the <acronym>UNIX</acronym> account information.
		</para>
		<para>
			After pressing the <keycap function="enter">enter</keycap> key some warning message will be shown:
		</para>
		<screen><![CDATA[
Currently there is no top level Makefile. This may require additional
tuning. Done. Please edit the files in the debian/ subdirectory now.
You should also check that the testdeb Makefiles install into $DESTDIR
and not in / .
		]]></screen>
		<para>
			Since this example is created from scratch, the missing <filename>Makefile</filename> is normal and this warning can be ignored.
			Instead of writing a Makefile to install the single executable, <command>dh_install</command> will be used later to install the file.
		</para>
		<para>
			Since the command completed successfully, several files were created in the <filename class="directory">debian/</filename> directory.
			Most of them are template files, which are unused in this example.
			To improve understandability they are deleted:
		</para>
		<programlisting><![CDATA[
rm debian/*.ex debian/*.EX
rm debian/README* debian/doc
	]]></programlisting>
		<para>
			The remaining files are required and control the build process of all binary packages.
			Most of them don't need to be modified for this example, but others must be completed using an editor.
		</para>
		<variablelist>
			<varlistentry>
				<term><filename>debian/control</filename></term>
				<listitem>
					<para>
						The file contains general information about the source and binary packages.
						It needs to be modified to include a description and contain the right build dependencies:
					</para>
					<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="testdeb/debian/control" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/rules</filename></term>
				<listitem>
					<para>
						This file has a <application>Makefile</application> syntax and controls the package build process.
						Because there is no special handling needed in this example, the default file can be used unmodified.
					</para>
					<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="testdeb/debian/rules" parse="text"/></programlisting>
					<para>
						Note that tabulators must be used for indentation in this file.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/testdeb.install</filename></term>
				<listitem>
					<para>
						To compensate the missing <filename>Makefile</filename>, <citerefentry><refentrytitle>dh_install</refentrytitle><manvolnum>1</manvolnum></citerefentry> is used to install the executable.
						<command>dh_install</command> is indirectly called by <command>dh</command> from the <filename>debian/rules</filename> file.
						To install the program into <filename class="directory">/usr/bin/</filename>, the file needs to be created manually containing the following single line:
					</para>
					<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="testdeb/debian/testdeb.install" parse="text"/></programlisting>
					<para>
						Note that the path is not absolute but relative.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/testdeb.postinst</filename></term>
				<listitem>
					<para>
						Since for this example the program should be invoked automatically during package installation, this file needs to be created.
						In addition to just invoking the program shipped with the package itself, it also shows how &ucsUCRV;s can be set (see <xref linkend="ucr:usage:shell"/>):
					</para>
					<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="testdeb/debian/testdeb.postinst" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/changelog</filename></term>
				<listitem>
					<para>
						The file is used to keep track of changes done to the packaging.
						For this example the file should look like this:
					</para>
					<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="testdeb/debian/changelog" parse="text"/></programlisting>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/copyright</filename></term>
				<listitem>
					<para>
						This file is used to collect copyright related information.
						It is critical for Debian only, which need this information to guarantee that the package is freely redistributable.
						For this example the file remains unchanged.
					</para>
					<!--
					<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="testdeb/debian/copyright" parse="text"/></programlisting>
					-->
					<para>
						The <filename>copyright</filename> and <filename>changelog</filename> file are installed to the <filename class="directory">/usr/share/doc/testdeb/</filename> directory on the target system.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>debian/compat</filename></term>
				<term><filename>debian/source/format</filename></term>
				<listitem>
					<para>
						These files control some internal aspects of the package build process.
						They can be ignored for the moment and are further described in <xref linkend="deb:debian"/>.
					</para>
					<!--
					<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="testdeb/debian/compat" parse="text"/></programlisting>
					<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="testdeb/debian/source/format" parse="text"/></programlisting>
					-->
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Now the package is ready and can be built by invoking the following command:
		</para>
		<programlisting>dpkg-buildpackage -us -uc</programlisting>
		<para>
			The command should then produce the following output:
		</para>
		<screen><![CDATA[
dpkg-buildpackage: source package testdeb
dpkg-buildpackage: source version 0.1-1
dpkg-buildpackage: source changed by John Doe <user@example.com>
dpkg-buildpackage: host architecture amd64
 dpkg-source --before-build testdeb
 fakeroot debian/rules clean
dh clean
   dh_testdir
   dh_auto_clean
   dh_clean
 dpkg-source -b testdeb
dpkg-source: Information: Quellformat »3.0 (native)« wird verwendet
dpkg-source: Information: testdeb wird in testdeb_0.1-1.tar.gz gebaut
dpkg-source: Information: testdeb wird in testdeb_0.1-1.dsc gebaut
 debian/rules build
dh build
   dh_testdir
   dh_auto_configure
   dh_auto_build
   dh_auto_test
 fakeroot debian/rules binary
dh binary
   dh_testroot
   dh_prep
   dh_installdirs
   dh_auto_install
   dh_install
   dh_installdocs
   dh_installchangelogs
   dh_installexamples
   dh_installman
   dh_installcatalogs
   dh_installcron
   dh_installdebconf
   dh_installemacsen
   dh_installifupdown
   dh_installinfo
   dh_pysupport
dh_pysupport: This program is deprecated, you should use dh_python2 instead. Migration guide: http://deb.li/dhs2p
   dh_installinit
   dh_installmenu
   dh_installmime
   dh_installmodules
   dh_installlogcheck
   dh_installlogrotate
   dh_installpam
   dh_installppp
   dh_installudev
   dh_installwm
   dh_installxfonts
   dh_installgsettings
   dh_bugfiles
   dh_ucf
   dh_lintian
   dh_gconf
   dh_icons
   dh_perl
   dh_usrlocal
   dh_link
   dh_compress
   dh_fixperms
   dh_installdeb
   dh_gencontrol
   dh_md5sums
   dh_builddeb
dpkg-deb: building package `testdeb' in `../testdeb_0.1-1_all.deb'.
 dpkg-genchanges -b >../testdeb_0.1-1_amd64.changes
dpkg-genchanges: binary-only upload - not including any source code
 dpkg-source --after-build testdeb
dpkg-buildpackage: full upload; Debian-native package (full source is included)
		]]></screen>
		<para>
			The binary package file <filename>testdeb_0.1-1_all.deb</filename> is stored in the parent directory.
			When it is installed manually using <command>dpkg -i ../testdeb_0.1-2_all.deb</command> as root, the Python script is installed as <filename>/usr/bin/testdeb.py</filename>.
			It is automatically invoked by the <filename>postint</filename> script, so a file named <filename>/tmp/testdeb-<replaceable>date</replaceable>-<replaceable>time</replaceable></filename> has been created, too.
		</para>
		<para>
			Congratulations!
			You've successfully built your first own Debian package.
		</para>
	</section>

	<section id="pkt:repository"><title>Setup repository
			<indexterm><primary>Repository</primary><see>Packaging</see></indexterm>
			<indexterm><primary>Packaging</primary><secondary>Package repository</secondary></indexterm>
		</title>
		<para>
			Until now the binary package is only available locally, thus for installation it needs to be copied manually to each host and must be installed manually using <command>dpkg -i</command>.
			If the package required additional dependencies, the installation process will abort, since packages are not downloaded by <command>dpkg</command>, but by <command>apt</command>.
			To support automatic installation and dependency resolution, the package must be put into an <application>apt</application> repository, which needs to be made available through <uri>http</uri> or some other mechanism.
		</para>
		<para>
			For this example the repository is created below <filename class="directory">/var/www/repository/</filename>, which is exported by default on all UCS systems, where <application>apache2</application> is installed.
			Below that directory several other sub-directories and files must be created to be compatible with the <application>UCS Updater</application>.
			The following example commands create a repository for UCS version 4.3 with the component name <replaceable>testcomp</replaceable>:
		</para>
		<programlisting><![CDATA[
WWW_BASE="/var/www/repository/4.3/maintained/component"
TESTCOMP="testcomp/all"
install -m755 -d "$WWW_BASE/$TESTCOMP"
install -m644 -t "$WWW_BASE/$TESTCOMP" *.deb
( cd "$WWW_BASE" &&
  rm -f "$TESTCOMP/Packages"* &&
  apt-ftparchive packages "$TESTCOMP" > "Packages" &&
  gzip -9 < "Packages" > "$TESTCOMP/Packages.gz" &&
  mv "Packages" "$TESTCOMP/Packages" )
		]]></programlisting>
		<para>
			This repository can be included on any UCS system by appending the following line to <filename>/etc/apt/sources.list</filename>, assuming the <acronym>FQDN</acronym> of the host providing the repository is named <replaceable>repository.server</replaceable>:
		</para>
		<programlisting>deb http://repository.server/repository/4.3/maintained/component testcomp/all/</programlisting>
		<note>
			<para>
				It is important that the directory, from were the <command>apt-ftparchive</command> command is invoked, matches the first string given in the <filename>sources.list</filename> file after the <literal>deb</literal> prefix.
				The <acronym>URL</acronym> together with the suffix <literal>testcomp/all/</literal> not only specifies the location of the <filename>Packages</filename> file, but is also used as the base <acronym>URL</acronym> for all packages listed in the <filename>Packages</filename> file.
			</para>
		</note>
		<para>
			Instead of editing the <filename>sources.list</filename> file directly, the repository can also be included as a component, which can be configured by setting several <acronym>UCR</acronym> variables.
			As <acronym>UCR</acronym> variables can also be configured through <acronym>UDM</acronym> policies, this simplifies the task of installing packages from such a repository on may hosts.
			For the repository above the following variables need to be set:
			<indexterm><primary>Config Registry</primary><secondary>Repository</secondary></indexterm>
		</para>
		<programlisting><![CDATA[
ucr set \
	repository/online/component/testcomp=yes \
	repository/online/component/testcomp/server=repository.server \
	repository/online/component/testcomp/prefix=repository
		]]></programlisting>
	</section>

	<section id="pkg:obs"><title>Building packages through the openSUSE Build Service</title>
	<para>
	  The openSUSE Build Service (OBS) is a framework to generate packages for a wide range of
	  distributions. Additional information can be found at <ulink
	  url="https://build.opensuse.org/"/>. If OBS is already used to build packages for other distributions, it can also
	  be used for Univention Corporate Server builds. The build target for UCS 4.3 is called
	  <emphasis>Univention UCS 4.3</emphasis>. Note that OBS doesn't handle the integration steps
	  described in later chapters (e.g. the use of Univention Configuration Registry templates).
	</para>
	</section>

</chapter>
<!-- vim:set ts=2 sw=2 noet ft=docbk:-->
